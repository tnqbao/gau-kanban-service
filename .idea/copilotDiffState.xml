<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/controller/column.go">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/controller/column.go" />
              <option name="originalContent" value="package controller&#10;" />
              <option name="updatedContent" value="package controller&#10;&#10;import (&#10;&#9;&quot;net/http&quot;&#10;&#9;&quot;strconv&quot;&#10;&#10;&#9;&quot;github.com/gin-gonic/gin&quot;&#10;&#9;&quot;github.com/tnqbao/gau-kanban-service/entity&quot;&#10;&#9;&quot;github.com/tnqbao/gau-kanban-service/repository&quot;&#10;&#9;&quot;github.com/tnqbao/gau-kanban-service/utils&quot;&#10;)&#10;&#10;type ColumnController struct {&#10;&#9;r repository.RepositoryInterface&#10;}&#10;&#10;func NewColumnController(r repository.RepositoryInterface) *ColumnController {&#10;&#9;return &amp;ColumnController{&#10;&#9;&#9;r: r,&#10;&#9;}&#10;}&#10;&#10;// GetKanbanBoard trả về toàn bộ kanban board với format như yêu cầu&#10;func (cc *ColumnController) GetKanbanBoard(c *gin.Context) {&#10;&#9;columns, err := cc.r.GetRepositories().Column.GetAllWithFullTicketDetails()&#10;&#9;if err != nil {&#10;&#9;&#9;utils.ErrorResponse(c, http.StatusInternalServerError, &quot;Failed to fetch kanban board&quot;, err.Error())&#10;&#9;&#9;return&#10;&#9;}&#10;&#10;&#9;// Convert to format like initialColumns&#10;&#9;kanbanColumns := make([]KanbanColumnResponse, len(columns))&#10;&#9;for i, col := range columns {&#10;&#9;&#9;tickets := make([]KanbanTicketResponse, len(col.Tickets))&#10;&#9;&#9;for j, ticket := range col.Tickets {&#10;&#9;&#9;&#9;// Convert labels to tags format&#10;&#9;&#9;&#9;tags := make([]string, len(ticket.Labels))&#10;&#9;&#9;&#9;for k, label := range ticket.Labels {&#10;&#9;&#9;&#9;&#9;tags[k] = label.Name&#10;&#9;&#9;&#9;}&#10;&#10;&#9;&#9;&#9;// Convert assignees to string array&#10;&#9;&#9;&#9;assignees := make([]string, len(ticket.Assignees))&#10;&#9;&#9;&#9;for k, assignee := range ticket.Assignees {&#10;&#9;&#9;&#9;&#9;assignees[k] = assignee.UserID&#10;&#9;&#9;&#9;}&#10;&#10;&#9;&#9;&#9;tickets[j] = KanbanTicketResponse{&#10;&#9;&#9;&#9;&#9;ID:          ticket.ID,&#10;&#9;&#9;&#9;&#9;Title:       ticket.Title,&#10;&#9;&#9;&#9;&#9;Description: ticket.Description,&#10;&#9;&#9;&#9;&#9;TicketNo:    ticket.TicketID,&#10;&#9;&#9;&#9;&#9;Tags:        tags,&#10;&#9;&#9;&#9;&#9;Assignees:   assignees,&#10;&#9;&#9;&#9;&#9;Completed:   ticket.Completed,&#10;&#9;&#9;&#9;&#9;DueDate:     ticket.DueDate,&#10;&#9;&#9;&#9;&#9;Priority:    ticket.Priority,&#10;&#9;&#9;&#9;}&#10;&#9;&#9;}&#10;&#10;&#9;&#9;kanbanColumns[i] = KanbanColumnResponse{&#10;&#9;&#9;&#9;ID:      col.ID,&#10;&#9;&#9;&#9;Title:   col.Title,&#10;&#9;&#9;&#9;Order:   col.Order,&#10;&#9;&#9;&#9;Tickets: tickets,&#10;&#9;&#9;}&#10;&#9;}&#10;&#10;&#9;utils.SuccessResponse(c, kanbanColumns)&#10;}&#10;&#10;// CreateColumn tạo column mới&#10;func (cc *ColumnController) CreateColumn(c *gin.Context) {&#10;&#9;var req CreateColumnRequest&#10;&#9;if err := c.ShouldBindJSON(&amp;req); err != nil {&#10;&#9;&#9;utils.ErrorResponse(c, http.StatusBadRequest, &quot;Invalid request body&quot;, err.Error())&#10;&#9;&#9;return&#10;&#9;}&#10;&#10;&#9;column := &amp;entity.Column{&#10;&#9;&#9;Name:     req.Name,&#10;&#9;&#9;Position: req.Position,&#10;&#9;}&#10;&#10;&#9;if err := cc.r.GetRepositories().Column.Create(column); err != nil {&#10;&#9;&#9;utils.ErrorResponse(c, http.StatusInternalServerError, &quot;Failed to create column&quot;, err.Error())&#10;&#9;&#9;return&#10;&#9;}&#10;&#10;&#9;utils.SuccessResponse(c, column)&#10;}&#10;&#10;// UpdateColumn cập nhật thông tin column&#10;func (cc *ColumnController) UpdateColumn(c *gin.Context) {&#10;&#9;id := c.Param(&quot;id&quot;)&#10;&#9;var req UpdateColumnRequest&#10;&#9;if err := c.ShouldBindJSON(&amp;req); err != nil {&#10;&#9;&#9;utils.ErrorResponse(c, http.StatusBadRequest, &quot;Invalid request body&quot;, err.Error())&#10;&#9;&#9;return&#10;&#9;}&#10;&#10;&#9;column, err := cc.r.GetRepositories().Column.GetByID(id)&#10;&#9;if err != nil {&#10;&#9;&#9;utils.ErrorResponse(c, http.StatusNotFound, &quot;Column not found&quot;, err.Error())&#10;&#9;&#9;return&#10;&#9;}&#10;&#10;&#9;if req.Name != &quot;&quot; {&#10;&#9;&#9;column.Name = req.Name&#10;&#9;}&#10;&#9;if req.Position != nil {&#10;&#9;&#9;column.Position = *req.Position&#10;&#9;}&#10;&#10;&#9;if err := cc.r.GetRepositories().Column.Update(column); err != nil {&#10;&#9;&#9;utils.ErrorResponse(c, http.StatusInternalServerError, &quot;Failed to update column&quot;, err.Error())&#10;&#9;&#9;return&#10;&#9;}&#10;&#10;&#9;utils.SuccessResponse(c, column)&#10;}&#10;&#10;// DeleteColumn xóa column&#10;func (cc *ColumnController) DeleteColumn(c *gin.Context) {&#10;&#9;id := c.Param(&quot;id&quot;)&#10;&#10;&#9;if err := cc.r.GetRepositories().Column.Delete(id); err != nil {&#10;&#9;&#9;utils.ErrorResponse(c, http.StatusInternalServerError, &quot;Failed to delete column&quot;, err.Error())&#10;&#9;&#9;return&#10;&#9;}&#10;&#10;&#9;utils.SuccessResponse(c, gin.H{&quot;message&quot;: &quot;Column deleted successfully&quot;})&#10;}&#10;&#10;// GetColumns lấy danh sách tất cả columns&#10;func (cc *ColumnController) GetColumns(c *gin.Context) {&#10;&#9;columns, err := cc.r.GetRepositories().Column.GetAll()&#10;&#9;if err != nil {&#10;&#9;&#9;utils.ErrorResponse(c, http.StatusInternalServerError, &quot;Failed to fetch columns&quot;, err.Error())&#10;&#9;&#9;return&#10;&#9;}&#10;&#10;&#9;utils.SuccessResponse(c, columns)&#10;}&#10;&#10;// UpdateColumnPosition thay đổi vị trí column&#10;func (cc *ColumnController) UpdateColumnPosition(c *gin.Context) {&#10;&#9;id := c.Param(&quot;id&quot;)&#10;&#9;var req UpdateColumnPositionRequest&#10;&#9;if err := c.ShouldBindJSON(&amp;req); err != nil {&#10;&#9;&#9;utils.ErrorResponse(c, http.StatusBadRequest, &quot;Invalid request body&quot;, err.Error())&#10;&#9;&#9;return&#10;&#9;}&#10;&#10;&#9;if err := cc.r.GetRepositories().Column.UpdatePosition(id, req.Position); err != nil {&#10;&#9;&#9;utils.ErrorResponse(c, http.StatusInternalServerError, &quot;Failed to update column position&quot;, err.Error())&#10;&#9;&#9;return&#10;&#9;}&#10;&#10;&#9;utils.SuccessResponse(c, gin.H{&quot;message&quot;: &quot;Column position updated successfully&quot;})&#10;}&#10;&#10;// MoveTicketToColumn di chuyển ticket sang column khác&#10;func (cc *ColumnController) MoveTicketToColumn(c *gin.Context) {&#10;&#9;var req MoveTicketRequest&#10;&#9;if err := c.ShouldBindJSON(&amp;req); err != nil {&#10;&#9;&#9;utils.ErrorResponse(c, http.StatusBadRequest, &quot;Invalid request body&quot;, err.Error())&#10;&#9;&#9;return&#10;&#9;}&#10;&#10;&#9;if err := cc.r.GetRepositories().Ticket.MoveToColumn(req.TicketID, req.ColumnID); err != nil {&#10;&#9;&#9;utils.ErrorResponse(c, http.StatusInternalServerError, &quot;Failed to move ticket&quot;, err.Error())&#10;&#9;&#9;return&#10;&#9;}&#10;&#10;&#9;utils.SuccessResponse(c, gin.H{&quot;message&quot;: &quot;Ticket moved successfully&quot;})&#10;}&#10;&#10;// CreateTicket tạo ticket mới trong column&#10;func (cc *ColumnController) CreateTicket(c *gin.Context) {&#10;&#9;var req CreateTicketRequest&#10;&#9;if err := c.ShouldBindJSON(&amp;req); err != nil {&#10;&#9;&#9;utils.ErrorResponse(c, http.StatusBadRequest, &quot;Invalid request body&quot;, err.Error())&#10;&#9;&#9;return&#10;&#9;}&#10;&#10;&#9;ticket := &amp;entity.Ticket{&#10;&#9;&#9;ColumnID:    req.ColumnID,&#10;&#9;&#9;Title:       req.Title,&#10;&#9;&#9;Description: req.Description,&#10;&#9;&#9;DueDate:     req.DueDate,&#10;&#9;&#9;Priority:    req.Priority,&#10;&#9;}&#10;&#10;&#9;if err := cc.r.GetRepositories().Ticket.Create(ticket); err != nil {&#10;&#9;&#9;utils.ErrorResponse(c, http.StatusInternalServerError, &quot;Failed to create ticket&quot;, err.Error())&#10;&#9;&#9;return&#10;&#9;}&#10;&#10;&#9;utils.SuccessResponse(c, ticket)&#10;}&#10;&#10;// UpdateTicket cập nhật thông tin ticket&#10;func (cc *ColumnController) UpdateTicket(c *gin.Context) {&#10;&#9;id := c.Param(&quot;id&quot;)&#10;&#9;var req UpdateTicketRequest&#10;&#9;if err := c.ShouldBindJSON(&amp;req); err != nil {&#10;&#9;&#9;utils.ErrorResponse(c, http.StatusBadRequest, &quot;Invalid request body&quot;, err.Error())&#10;&#9;&#9;return&#10;&#9;}&#10;&#10;&#9;ticket, err := cc.r.GetRepositories().Ticket.GetByID(id)&#10;&#9;if err != nil {&#10;&#9;&#9;utils.ErrorResponse(c, http.StatusNotFound, &quot;Ticket not found&quot;, err.Error())&#10;&#9;&#9;return&#10;&#9;}&#10;&#10;&#9;if req.Title != &quot;&quot; {&#10;&#9;&#9;ticket.Title = req.Title&#10;&#9;}&#10;&#9;if req.Description != &quot;&quot; {&#10;&#9;&#9;ticket.Description = req.Description&#10;&#9;}&#10;&#9;if req.DueDate != &quot;&quot; {&#10;&#9;&#9;ticket.DueDate = req.DueDate&#10;&#9;}&#10;&#9;if req.Priority != &quot;&quot; {&#10;&#9;&#9;ticket.Priority = req.Priority&#10;&#9;}&#10;&#10;&#9;if err := cc.r.GetRepositories().Ticket.Update(ticket); err != nil {&#10;&#9;&#9;utils.ErrorResponse(c, http.StatusInternalServerError, &quot;Failed to update ticket&quot;, err.Error())&#10;&#9;&#9;return&#10;&#9;}&#10;&#10;&#9;utils.SuccessResponse(c, ticket)&#10;}&#10;&#10;// DeleteTicket xóa ticket&#10;func (cc *ColumnController) DeleteTicket(c *gin.Context) {&#10;&#9;id := c.Param(&quot;id&quot;)&#10;&#10;&#9;if err := cc.r.GetRepositories().Ticket.Delete(id); err != nil {&#10;&#9;&#9;utils.ErrorResponse(c, http.StatusInternalServerError, &quot;Failed to delete ticket&quot;, err.Error())&#10;&#9;&#9;return&#10;&#9;}&#10;&#10;&#9;utils.SuccessResponse(c, gin.H{&quot;message&quot;: &quot;Ticket deleted successfully&quot;})&#10;}&#10;&#10;// GetTagColors trả về mapping màu sắc cho các tag&#10;func (cc *ColumnController) GetTagColors(c *gin.Context) {&#10;&#9;labels, err := cc.r.GetRepositories().Label.GetAll()&#10;&#9;if err != nil {&#10;&#9;&#9;utils.ErrorResponse(c, http.StatusInternalServerError, &quot;Failed to fetch labels&quot;, err.Error())&#10;&#9;&#9;return&#10;&#9;}&#10;&#10;&#9;tagColors := make(map[string]string)&#10;&#9;for _, label := range labels {&#10;&#9;&#9;tagColors[label.Name] = label.Color&#10;&#9;}&#10;&#10;&#9;utils.SuccessResponse(c, tagColors)&#10;}&#10;&#10;// Request/Response structures&#10;type KanbanColumnResponse struct {&#10;&#9;ID      string                `json:&quot;id&quot;`&#10;&#9;Title   string                `json:&quot;title&quot;`&#10;&#9;Order   int                   `json:&quot;order&quot;`&#10;&#9;Tickets []KanbanTicketResponse `json:&quot;tickets&quot;`&#10;}&#10;&#10;type KanbanTicketResponse struct {&#10;&#9;ID          string   `json:&quot;id&quot;`&#10;&#9;Title       string   `json:&quot;title&quot;`&#10;&#9;Description string   `json:&quot;description&quot;`&#10;&#9;TicketNo    string   `json:&quot;ticketNo&quot;`&#10;&#9;Tags        []string `json:&quot;tags&quot;`&#10;&#9;Assignees   []string `json:&quot;assignees&quot;`&#10;&#9;Completed   bool     `json:&quot;completed&quot;`&#10;&#9;DueDate     string   `json:&quot;due_date,omitempty&quot;`&#10;&#9;Priority    string   `json:&quot;priority,omitempty&quot;`&#10;}&#10;&#10;type CreateColumnRequest struct {&#10;&#9;Name     string `json:&quot;name&quot; binding:&quot;required&quot;`&#10;&#9;Position int    `json:&quot;position&quot;`&#10;}&#10;&#10;type UpdateColumnRequest struct {&#10;&#9;Name     string `json:&quot;name&quot;`&#10;&#9;Position *int   `json:&quot;position&quot;`&#10;}&#10;&#10;type UpdateColumnPositionRequest struct {&#10;&#9;Position int `json:&quot;position&quot; binding:&quot;required&quot;`&#10;}&#10;&#10;type MoveTicketRequest struct {&#10;&#9;TicketID string `json:&quot;ticket_id&quot; binding:&quot;required&quot;`&#10;&#9;ColumnID string `json:&quot;column_id&quot; binding:&quot;required&quot;`&#10;}&#10;&#10;type CreateTicketRequest struct {&#10;&#9;ColumnID    string `json:&quot;column_id&quot; binding:&quot;required&quot;`&#10;&#9;Title       string `json:&quot;title&quot; binding:&quot;required&quot;`&#10;&#9;Description string `json:&quot;description&quot;`&#10;&#9;DueDate     string `json:&quot;due_date&quot;`&#10;&#9;Priority    string `json:&quot;priority&quot;`&#10;}&#10;&#10;type UpdateTicketRequest struct {&#10;&#9;Title       string `json:&quot;title&quot;`&#10;&#9;Description string `json:&quot;description&quot;`&#10;&#9;DueDate     string `json:&quot;due_date&quot;`&#10;&#9;Priority    string `json:&quot;priority&quot;`&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/repository/column_repository.go">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/repository/column_repository.go" />
              <option name="originalContent" value="package repository&#10;&#10;import (&#10;&#9;&quot;github.com/tnqbao/gau-kanban-service/entity&quot;&#10;&#9;&quot;gorm.io/gorm&quot;&#10;)&#10;&#10;type ColumnRepository struct {&#10;&#9;db *gorm.DB&#10;}&#10;&#10;func NewColumnRepository(db *gorm.DB) ColumnRepositoryInterface {&#10;&#9;return &amp;ColumnRepository{db: db}&#10;}&#10;&#10;func (r *ColumnRepository) Create(column *entity.Column) error {&#10;&#9;return r.db.Create(column).Error&#10;}&#10;&#10;func (r *ColumnRepository) GetAll() ([]entity.Column, error) {&#10;&#9;var columns []entity.Column&#10;&#9;err := r.db.Order(&quot;position ASC&quot;).Find(&amp;columns).Error&#10;&#9;return columns, err&#10;}&#10;&#10;func (r *ColumnRepository) GetByID(id string) (*entity.Column, error) {&#10;&#9;var column entity.Column&#10;&#9;err := r.db.Where(&quot;id = ?&quot;, id).First(&amp;column).Error&#10;&#9;if err != nil {&#10;&#9;&#9;return nil, err&#10;&#9;}&#10;&#9;return &amp;column, nil&#10;}&#10;&#10;func (r *ColumnRepository) Update(column *entity.Column) error {&#10;&#9;return r.db.Save(column).Error&#10;}&#10;&#10;func (r *ColumnRepository) Delete(id string) error {&#10;&#9;return r.db.Delete(&amp;entity.Column{}, &quot;id = ?&quot;, id).Error&#10;}&#10;&#10;func (r *ColumnRepository) UpdatePosition(id string, position int) error {&#10;&#9;return r.db.Model(&amp;entity.Column{}).Where(&quot;id = ?&quot;, id).Update(&quot;position&quot;, position).Error&#10;}&#10;&#10;func (r *ColumnRepository) GetAllWithTickets() ([]ColumnWithTicketsDTO, error) {&#10;&#9;var columns []entity.Column&#10;&#9;var result []ColumnWithTicketsDTO&#10;&#10;&#9;// Lấy tất cả columns theo thứ tự position&#10;&#9;err := r.db.Order(&quot;position ASC&quot;).Find(&amp;columns).Error&#10;&#9;if err != nil {&#10;&#9;&#9;return nil, err&#10;&#9;}&#10;&#10;&#9;// Duyệt qua từng column và lấy tickets của nó&#10;&#9;for _, column := range columns {&#10;&#9;&#9;columnDTO := ColumnWithTicketsDTO{&#10;&#9;&#9;&#9;ID:      column.ID,&#10;&#9;&#9;&#9;Title:   column.Name,&#10;&#9;&#9;&#9;Order:   column.Position,&#10;&#9;&#9;&#9;Tickets: []TicketDTO{},&#10;&#9;&#9;}&#10;&#10;&#9;&#9;// Lấy tickets của column này&#10;&#9;&#9;var tickets []entity.Ticket&#10;&#9;&#9;err := r.db.Where(&quot;column_id = ?&quot;, column.ID).Order(&quot;created_at ASC&quot;).Find(&amp;tickets).Error&#10;&#9;&#9;if err != nil {&#10;&#9;&#9;&#9;return nil, err&#10;&#9;&#9;}&#10;&#10;&#9;&#9;// Convert tickets thành TicketDTO&#10;&#9;&#9;for _, ticket := range tickets {&#10;&#9;&#9;&#9;// Lấy labels của ticket&#10;&#9;&#9;&#9;var labels []string&#10;&#9;&#9;&#9;err := r.db.Table(&quot;labels&quot;).&#10;&#9;&#9;&#9;&#9;Select(&quot;labels.name&quot;).&#10;&#9;&#9;&#9;&#9;Joins(&quot;JOIN ticket_labels ON labels.id = ticket_labels.label_id&quot;).&#10;&#9;&#9;&#9;&#9;Where(&quot;ticket_labels.ticket_id = ?&quot;, ticket.ID).&#10;&#9;&#9;&#9;&#9;Pluck(&quot;name&quot;, &amp;labels).Error&#10;&#9;&#9;&#9;if err != nil {&#10;&#9;&#9;&#9;&#9;labels = []string{} // Nếu có lỗi thì để array rỗng&#10;&#9;&#9;&#9;}&#10;&#10;&#9;&#9;&#9;// Lấy assignees của ticket&#10;&#9;&#9;&#9;var assignees []string&#10;&#9;&#9;&#9;err = r.db.Table(&quot;task_assignments&quot;).&#10;&#9;&#9;&#9;&#9;Select(&quot;user_id&quot;).&#10;&#9;&#9;&#9;&#9;Where(&quot;ticket_id = ?&quot;, ticket.ID).&#10;&#9;&#9;&#9;&#9;Pluck(&quot;user_id&quot;, &amp;assignees).Error&#10;&#9;&#9;&#9;if err != nil {&#10;&#9;&#9;&#9;&#9;assignees = []string{} // Nếu có lỗi thì để array rỗng&#10;&#9;&#9;&#9;}&#10;&#10;&#9;&#9;&#9;// Xác định completed dựa trên column name (có thể customize logic này)&#10;&#9;&#9;&#9;completed := column.Name == &quot;DONE&quot; || column.Name == &quot;COMPLETED&quot;&#10;&#10;&#9;&#9;&#9;ticketDTO := TicketDTO{&#10;&#9;&#9;&#9;&#9;ID:          ticket.ID,&#10;&#9;&#9;&#9;&#9;Title:       ticket.Title,&#10;&#9;&#9;&#9;&#9;Description: ticket.Description,&#10;&#9;&#9;&#9;&#9;TicketID:    ticket.ID, // Sử dụng ID làm ticket_id&#10;&#9;&#9;&#9;&#9;Labels:      labels,    // Sử dụng Labels thay vì Tags&#10;&#9;&#9;&#9;&#9;Assignees:   assignees,&#10;&#9;&#9;&#9;&#9;Completed:   completed,&#10;&#9;&#9;&#9;&#9;DueDate:     ticket.DueDate,&#10;&#9;&#9;&#9;&#9;Priority:    ticket.Priority,&#10;&#9;&#9;&#9;&#9;CreatedAt:   ticket.CreatedAt,&#10;&#9;&#9;&#9;&#9;UpdatedAt:   ticket.UpdatedAt,&#10;&#9;&#9;&#9;}&#10;&#10;&#9;&#9;&#9;columnDTO.Tickets = append(columnDTO.Tickets, ticketDTO)&#10;&#9;&#9;}&#10;&#10;&#9;&#9;result = append(result, columnDTO)&#10;&#9;}&#10;&#10;&#9;return result, nil&#10;}&#10;" />
              <option name="updatedContent" value="package repository&#10;&#10;import (&#10;&#9;&quot;github.com/tnqbao/gau-kanban-service/entity&quot;&#10;&#9;&quot;gorm.io/gorm&quot;&#10;)&#10;&#10;type ColumnRepository struct {&#10;&#9;db *gorm.DB&#10;}&#10;&#10;func NewColumnRepository(db *gorm.DB) ColumnRepositoryInterface {&#10;&#9;return &amp;ColumnRepository{db: db}&#10;}&#10;&#10;func (r *ColumnRepository) Create(column *entity.Column) error {&#10;&#9;return r.db.Create(column).Error&#10;}&#10;&#10;func (r *ColumnRepository) GetAll() ([]entity.Column, error) {&#10;&#9;var columns []entity.Column&#10;&#9;err := r.db.Order(&quot;position ASC&quot;).Find(&amp;columns).Error&#10;&#9;return columns, err&#10;}&#10;&#10;func (r *ColumnRepository) GetByID(id string) (*entity.Column, error) {&#10;&#9;var column entity.Column&#10;&#9;err := r.db.Where(&quot;id = ?&quot;, id).First(&amp;column).Error&#10;&#9;if err != nil {&#10;&#9;&#9;return nil, err&#10;&#9;}&#10;&#9;return &amp;column, nil&#10;}&#10;&#10;func (r *ColumnRepository) Update(column *entity.Column) error {&#10;&#9;return r.db.Save(column).Error&#10;}&#10;&#10;func (r *ColumnRepository) Delete(id string) error {&#10;&#9;return r.db.Delete(&amp;entity.Column{}, &quot;id = ?&quot;, id).Error&#10;}&#10;&#10;func (r *ColumnRepository) UpdatePosition(id string, position int) error {&#10;&#9;return r.db.Model(&amp;entity.Column{}).Where(&quot;id = ?&quot;, id).Update(&quot;position&quot;, position).Error&#10;}&#10;&#10;func (r *ColumnRepository) GetAllWithTickets() ([]ColumnWithTicketsDTO, error) {&#10;&#9;var columns []entity.Column&#10;&#9;var result []ColumnWithTicketsDTO&#10;&#10;&#9;// Lấy tất cả columns theo thứ tự position&#10;&#9;err := r.db.Order(&quot;position ASC&quot;).Find(&amp;columns).Error&#10;&#9;if err != nil {&#10;&#9;&#9;return nil, err&#10;&#9;}&#10;&#10;&#9;// Duyệt qua từng column và lấy tickets của nó&#10;&#9;for _, column := range columns {&#10;&#9;&#9;columnDTO := ColumnWithTicketsDTO{&#10;&#9;&#9;&#9;ID:      column.ID,&#10;&#9;&#9;&#9;Title:   column.Name,&#10;&#9;&#9;&#9;Order:   column.Position,&#10;&#9;&#9;&#9;Tickets: []TicketDTO{},&#10;&#9;&#9;}&#10;&#10;&#9;&#9;// Lấy tickets của column này&#10;&#9;&#9;var tickets []entity.Ticket&#10;&#9;&#9;err := r.db.Where(&quot;column_id = ?&quot;, column.ID).Order(&quot;created_at ASC&quot;).Find(&amp;tickets).Error&#10;&#9;&#9;if err != nil {&#10;&#9;&#9;&#9;return nil, err&#10;&#9;&#9;}&#10;&#10;&#9;&#9;// Convert tickets thành TicketDTO với thông tin cơ bản&#10;&#9;&#9;for _, ticket := range tickets {&#10;&#9;&#9;&#9;// Lấy labels của ticket&#10;&#9;&#9;&#9;var labels []LabelDTO&#10;&#9;&#9;&#9;err := r.db.Table(&quot;labels&quot;).&#10;&#9;&#9;&#9;&#9;Select(&quot;labels.id, labels.name, labels.color&quot;).&#10;&#9;&#9;&#9;&#9;Joins(&quot;JOIN ticket_labels ON labels.id = ticket_labels.label_id&quot;).&#10;&#9;&#9;&#9;&#9;Where(&quot;ticket_labels.ticket_id = ?&quot;, ticket.ID).&#10;&#9;&#9;&#9;&#9;Scan(&amp;labels).Error&#10;&#9;&#9;&#9;if err != nil {&#10;&#9;&#9;&#9;&#9;labels = []LabelDTO{} // Nếu có lỗi thì để array rỗng&#10;&#9;&#9;&#9;}&#10;&#10;&#9;&#9;&#9;// Lấy assignees của ticket&#10;&#9;&#9;&#9;var assignees []AssigneeDTO&#10;&#9;&#9;&#9;err = r.db.Table(&quot;task_assignments&quot;).&#10;&#9;&#9;&#9;&#9;Select(&quot;task_assignments.id, task_assignments.user_id, task_assignments.user_full_name as user_full_name, task_assignments.assigned_at&quot;).&#10;&#9;&#9;&#9;&#9;Where(&quot;ticket_id = ?&quot;, ticket.ID).&#10;&#9;&#9;&#9;&#9;Scan(&amp;assignees).Error&#10;&#9;&#9;&#9;if err != nil {&#10;&#9;&#9;&#9;&#9;assignees = []AssigneeDTO{} // Nếu có lỗi thì để array rỗng&#10;&#9;&#9;&#9;}&#10;&#10;&#9;&#9;&#9;// Xác định completed dựa trên column name&#10;&#9;&#9;&#9;completed := column.Name == &quot;DONE&quot; || column.Name == &quot;COMPLETED&quot;&#10;&#10;&#9;&#9;&#9;ticketDTO := TicketDTO{&#10;&#9;&#9;&#9;&#9;ID:          ticket.ID,&#10;&#9;&#9;&#9;&#9;Title:       ticket.Title,&#10;&#9;&#9;&#9;&#9;Description: ticket.Description,&#10;&#9;&#9;&#9;&#9;TicketID:    ticket.ID,&#10;&#9;&#9;&#9;&#9;Labels:      labels,&#10;&#9;&#9;&#9;&#9;Assignees:   assignees,&#10;&#9;&#9;&#9;&#9;Comments:    []CommentDTO{}, // Comments rỗng cho performance&#10;&#9;&#9;&#9;&#9;Completed:   completed,&#10;&#9;&#9;&#9;&#9;DueDate:     ticket.DueDate,&#10;&#9;&#9;&#9;&#9;Priority:    ticket.Priority,&#10;&#9;&#9;&#9;&#9;CreatedAt:   ticket.CreatedAt,&#10;&#9;&#9;&#9;&#9;UpdatedAt:   ticket.UpdatedAt,&#10;&#9;&#9;&#9;}&#10;&#10;&#9;&#9;&#9;columnDTO.Tickets = append(columnDTO.Tickets, ticketDTO)&#10;&#9;&#9;}&#10;&#10;&#9;&#9;result = append(result, columnDTO)&#10;&#9;}&#10;&#10;&#9;return result, nil&#10;}&#10;&#10;func (r *ColumnRepository) GetAllWithFullTicketDetails() ([]ColumnWithTicketsDTO, error) {&#10;&#9;var columns []entity.Column&#10;&#9;var result []ColumnWithTicketsDTO&#10;&#10;&#9;// Lấy tất cả columns theo thứ tự position&#10;&#9;err := r.db.Order(&quot;position ASC&quot;).Find(&amp;columns).Error&#10;&#9;if err != nil {&#10;&#9;&#9;return nil, err&#10;&#9;}&#10;&#10;&#9;// Duyệt qua từng column và lấy tickets với đầy đủ thông tin&#10;&#9;for _, column := range columns {&#10;&#9;&#9;columnDTO := ColumnWithTicketsDTO{&#10;&#9;&#9;&#9;ID:      column.ID,&#10;&#9;&#9;&#9;Title:   column.Name,&#10;&#9;&#9;&#9;Order:   column.Position,&#10;&#9;&#9;&#9;Tickets: []TicketDTO{},&#10;&#9;&#9;}&#10;&#10;&#9;&#9;// Lấy tickets của column này&#10;&#9;&#9;var tickets []entity.Ticket&#10;&#9;&#9;err := r.db.Where(&quot;column_id = ?&quot;, column.ID).Order(&quot;created_at ASC&quot;).Find(&amp;tickets).Error&#10;&#9;&#9;if err != nil {&#10;&#9;&#9;&#9;return nil, err&#10;&#9;&#9;}&#10;&#10;&#9;&#9;// Convert tickets thành TicketDTO với đầy đủ thông tin&#10;&#9;&#9;for _, ticket := range tickets {&#10;&#9;&#9;&#9;// Lấy labels chi tiết&#10;&#9;&#9;&#9;var labels []LabelDTO&#10;&#9;&#9;&#9;err := r.db.Table(&quot;labels&quot;).&#10;&#9;&#9;&#9;&#9;Select(&quot;labels.id, labels.name, labels.color&quot;).&#10;&#9;&#9;&#9;&#9;Joins(&quot;JOIN ticket_labels ON labels.id = ticket_labels.label_id&quot;).&#10;&#9;&#9;&#9;&#9;Where(&quot;ticket_labels.ticket_id = ?&quot;, ticket.ID).&#10;&#9;&#9;&#9;&#9;Scan(&amp;labels).Error&#10;&#9;&#9;&#9;if err != nil {&#10;&#9;&#9;&#9;&#9;labels = []LabelDTO{}&#10;&#9;&#9;&#9;}&#10;&#10;&#9;&#9;&#9;// Lấy assignees chi tiết&#10;&#9;&#9;&#9;var assignees []AssigneeDTO&#10;&#9;&#9;&#9;err = r.db.Table(&quot;task_assignments&quot;).&#10;&#9;&#9;&#9;&#9;Select(&quot;task_assignments.id, task_assignments.user_id, task_assignments.user_full_name as user_full_name, task_assignments.assigned_at&quot;).&#10;&#9;&#9;&#9;&#9;Where(&quot;ticket_id = ?&quot;, ticket.ID).&#10;&#9;&#9;&#9;&#9;Scan(&amp;assignees).Error&#10;&#9;&#9;&#9;if err != nil {&#10;&#9;&#9;&#9;&#9;assignees = []AssigneeDTO{}&#10;&#9;&#9;&#9;}&#10;&#10;&#9;&#9;&#9;// Lấy comments chi tiết&#10;&#9;&#9;&#9;var comments []CommentDTO&#10;&#9;&#9;&#9;err = r.db.Table(&quot;ticket_comments&quot;).&#10;&#9;&#9;&#9;&#9;Select(&quot;id, user_id, content, created_at&quot;).&#10;&#9;&#9;&#9;&#9;Where(&quot;ticket_id = ?&quot;, ticket.ID).&#10;&#9;&#9;&#9;&#9;Order(&quot;created_at ASC&quot;).&#10;&#9;&#9;&#9;&#9;Scan(&amp;comments).Error&#10;&#9;&#9;&#9;if err != nil {&#10;&#9;&#9;&#9;&#9;comments = []CommentDTO{}&#10;&#9;&#9;&#9;}&#10;&#10;&#9;&#9;&#9;// Xác định completed&#10;&#9;&#9;&#9;completed := column.Name == &quot;DONE&quot; || column.Name == &quot;COMPLETED&quot;&#10;&#10;&#9;&#9;&#9;ticketDTO := TicketDTO{&#10;&#9;&#9;&#9;&#9;ID:          ticket.ID,&#10;&#9;&#9;&#9;&#9;Title:       ticket.Title,&#10;&#9;&#9;&#9;&#9;Description: ticket.Description,&#10;&#9;&#9;&#9;&#9;TicketID:    ticket.ID,&#10;&#9;&#9;&#9;&#9;Labels:      labels,&#10;&#9;&#9;&#9;&#9;Assignees:   assignees,&#10;&#9;&#9;&#9;&#9;Comments:    comments,&#10;&#9;&#9;&#9;&#9;Completed:   completed,&#10;&#9;&#9;&#9;&#9;DueDate:     ticket.DueDate,&#10;&#9;&#9;&#9;&#9;Priority:    ticket.Priority,&#10;&#9;&#9;&#9;&#9;CreatedAt:   ticket.CreatedAt,&#10;&#9;&#9;&#9;&#9;UpdatedAt:   ticket.UpdatedAt,&#10;&#9;&#9;&#9;}&#10;&#10;&#9;&#9;&#9;columnDTO.Tickets = append(columnDTO.Tickets, ticketDTO)&#10;&#9;&#9;}&#10;&#10;&#9;&#9;result = append(result, columnDTO)&#10;&#9;}&#10;&#10;&#9;return result, nil&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/repository/interfaces.go">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/repository/interfaces.go" />
              <option name="originalContent" value="package repository&#10;&#10;import (&#10;&#9;&quot;github.com/tnqbao/gau-kanban-service/entity&quot;&#10;)&#10;&#10;// ColumnRepositoryInterface defines methods for column operations&#10;type ColumnRepositoryInterface interface {&#10;&#9;Create(column *entity.Column) error&#10;&#9;GetAll() ([]entity.Column, error)&#10;&#9;GetByID(id string) (*entity.Column, error)&#10;&#9;Update(column *entity.Column) error&#10;&#9;Delete(id string) error&#10;&#9;UpdatePosition(id string, position int) error&#10;&#9;GetAllWithTickets() ([]ColumnWithTicketsDTO, error)&#10;}&#10;&#10;// TicketRepositoryInterface defines methods for ticket operations&#10;type TicketRepositoryInterface interface {&#10;&#9;Create(ticket *entity.Ticket) error&#10;&#9;GetAll() ([]entity.Ticket, error)&#10;&#9;GetByID(id string) (*entity.Ticket, error)&#10;&#9;GetByColumnID(columnID string) ([]entity.Ticket, error)&#10;&#9;Update(ticket *entity.Ticket) error&#10;&#9;Delete(id string) error&#10;&#9;MoveToColumn(ticketID, columnID string) error&#10;&#9;GetWithAssignments(ticketID string) (*entity.Ticket, []entity.TaskAssignment, error)&#10;&#9;GetWithLabels(ticketID string) (*entity.Ticket, []entity.Label, error)&#10;&#9;Search(query string) ([]entity.Ticket, error)&#10;}&#10;&#10;// LabelRepositoryInterface defines methods for label operations&#10;type LabelRepositoryInterface interface {&#10;&#9;Create(label *entity.Label) error&#10;&#9;GetAll() ([]entity.Label, error)&#10;&#9;GetByID(id string) (*entity.Label, error)&#10;&#9;Update(label *entity.Label) error&#10;&#9;Delete(id string) error&#10;&#9;GetByTicketID(ticketID string) ([]entity.Label, error)&#10;}&#10;&#10;// TaskAssignmentRepositoryInterface defines methods for task assignment operations&#10;type TaskAssignmentRepositoryInterface interface {&#10;&#9;Create(assignment *entity.TaskAssignment) error&#10;&#9;GetAll() ([]entity.TaskAssignment, error)&#10;&#9;GetByID(id string) (*entity.TaskAssignment, error)&#10;&#9;GetByTicketID(ticketID string) ([]entity.TaskAssignment, error)&#10;&#9;GetByUserID(userID string) ([]entity.TaskAssignment, error)&#10;&#9;Update(assignment *entity.TaskAssignment) error&#10;&#9;Delete(id string) error&#10;&#9;DeleteByTicketAndUser(ticketID, userID string) error&#10;}&#10;&#10;// TicketCommentRepositoryInterface defines methods for ticket comment operations&#10;type TicketCommentRepositoryInterface interface {&#10;&#9;Create(comment *entity.TicketComment) error&#10;&#9;GetAll() ([]entity.TicketComment, error)&#10;&#9;GetByID(id string) (*entity.TicketComment, error)&#10;&#9;GetByTicketID(ticketID string) ([]entity.TicketComment, error)&#10;&#9;GetByUserID(userID string) ([]entity.TicketComment, error)&#10;&#9;Update(comment *entity.TicketComment) error&#10;&#9;Delete(id string) error&#10;}&#10;&#10;// TicketLabelRepositoryInterface defines methods for ticket-label relationship operations&#10;type TicketLabelRepositoryInterface interface {&#10;&#9;AddLabelToTicket(ticketID, labelID string) error&#10;&#9;RemoveLabelFromTicket(ticketID, labelID string) error&#10;&#9;GetTicketsByLabelID(labelID string) ([]entity.Ticket, error)&#10;&#9;GetLabelsByTicketID(ticketID string) ([]entity.Label, error)&#10;&#9;RemoveAllLabelsFromTicket(ticketID string) error&#10;}&#10;" />
              <option name="updatedContent" value="package repository&#10;&#10;import (&#10;&#9;&quot;github.com/tnqbao/gau-kanban-service/entity&quot;&#10;)&#10;&#10;// ColumnRepositoryInterface defines methods for column operations&#10;type ColumnRepositoryInterface interface {&#10;&#9;Create(column *entity.Column) error&#10;&#9;GetAll() ([]entity.Column, error)&#10;&#9;GetByID(id string) (*entity.Column, error)&#10;&#9;Update(column *entity.Column) error&#10;&#9;Delete(id string) error&#10;&#9;UpdatePosition(id string, position int) error&#10;&#9;GetAllWithTickets() ([]ColumnWithTicketsDTO, error)&#10;&#9;GetAllWithFullTicketDetails() ([]ColumnWithTicketsDTO, error)&#10;}&#10;&#10;// TicketRepositoryInterface defines methods for ticket operations&#10;type TicketRepositoryInterface interface {&#10;&#9;Create(ticket *entity.Ticket) error&#10;&#9;GetAll() ([]entity.Ticket, error)&#10;&#9;GetByID(id string) (*entity.Ticket, error)&#10;&#9;GetByColumnID(columnID string) ([]entity.Ticket, error)&#10;&#9;Update(ticket *entity.Ticket) error&#10;&#9;Delete(id string) error&#10;&#9;MoveToColumn(ticketID, columnID string) error&#10;&#9;GetWithAssignments(ticketID string) (*entity.Ticket, []entity.TaskAssignment, error)&#10;&#9;GetWithLabels(ticketID string) (*entity.Ticket, []entity.Label, error)&#10;&#9;Search(query string) ([]entity.Ticket, error)&#10;&#9;GetTicketDetail(ticketID string) (*TicketDetailDTO, error)&#10;&#9;GetTicketWithAllRelations(ticketID string) (*TicketDTO, error)&#10;}&#10;&#10;// LabelRepositoryInterface defines methods for label operations&#10;type LabelRepositoryInterface interface {&#10;&#9;Create(label *entity.Label) error&#10;&#9;GetAll() ([]entity.Label, error)&#10;&#9;GetByID(id string) (*entity.Label, error)&#10;&#9;Update(label *entity.Label) error&#10;&#9;Delete(id string) error&#10;&#9;GetByTicketID(ticketID string) ([]entity.Label, error)&#10;}&#10;&#10;// TaskAssignmentRepositoryInterface defines methods for task assignment operations&#10;type TaskAssignmentRepositoryInterface interface {&#10;&#9;Create(assignment *entity.TaskAssignment) error&#10;&#9;GetAll() ([]entity.TaskAssignment, error)&#10;&#9;GetByID(id string) (*entity.TaskAssignment, error)&#10;&#9;GetByTicketID(ticketID string) ([]entity.TaskAssignment, error)&#10;&#9;GetByUserID(userID string) ([]entity.TaskAssignment, error)&#10;&#9;Update(assignment *entity.TaskAssignment) error&#10;&#9;Delete(id string) error&#10;&#9;DeleteByTicketAndUser(ticketID, userID string) error&#10;}&#10;&#10;// TicketCommentRepositoryInterface defines methods for ticket comment operations&#10;type TicketCommentRepositoryInterface interface {&#10;&#9;Create(comment *entity.TicketComment) error&#10;&#9;GetAll() ([]entity.TicketComment, error)&#10;&#9;GetByID(id string) (*entity.TicketComment, error)&#10;&#9;GetByTicketID(ticketID string) ([]entity.TicketComment, error)&#10;&#9;GetByUserID(userID string) ([]entity.TicketComment, error)&#10;&#9;Update(comment *entity.TicketComment) error&#10;&#9;Delete(id string) error&#10;}&#10;&#10;// TicketLabelRepositoryInterface defines methods for ticket-label relationship operations&#10;type TicketLabelRepositoryInterface interface {&#10;&#9;AddLabelToTicket(ticketID, labelID string) error&#10;&#9;RemoveLabelFromTicket(ticketID, labelID string) error&#10;&#9;GetTicketsByLabelID(labelID string) ([]entity.Ticket, error)&#10;&#9;GetLabelsByTicketID(ticketID string) ([]entity.Label, error)&#10;&#9;RemoveAllLabelsFromTicket(ticketID string) error&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/routes/routes.go">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/routes/routes.go" />
              <option name="originalContent" value="package routes&#10;&#10;import (&#10;&#9;&quot;github.com/gin-gonic/gin&quot;&#10;&#9;&quot;github.com/tnqbao/gau-kanban-service/config&quot;&#10;&#9;&quot;github.com/tnqbao/gau-kanban-service/controller&quot;&#10;&#9;&quot;github.com/tnqbao/gau-kanban-service/infra&quot;&#10;)&#10;&#10;func SetupRouter(config *config.Config) *gin.Engine {&#10;&#9;inf := infra.InitInfra(config)&#10;&#9;ctrl := controller.NewController(config, inf)&#10;&#10;&#9;r := gin.Default()&#10;&#10;&#9;apiRoutes := r.Group(&quot;/api/v2/kanban/&quot;)&#10;&#9;{&#10;&#9;&#9;apiRoutes.GET(&quot;/&quot;, ctrl.CheckHealth)&#10;&#9;}&#10;&#9;return r&#10;}&#10;" />
              <option name="updatedContent" value="package routes&#10;&#10;import (&#10;&#9;&quot;github.com/gin-gonic/gin&quot;&#10;&#9;&quot;github.com/tnqbao/gau-kanban-service/config&quot;&#10;&#9;&quot;github.com/tnqbao/gau-kanban-service/controller&quot;&#10;&#9;&quot;github.com/tnqbao/gau-kanban-service/infra&quot;&#10;&#9;&quot;github.com/tnqbao/gau-kanban-service/repository&quot;&#10;)&#10;&#10;func SetupRouter(config *config.Config) *gin.Engine {&#10;&#9;inf := infra.InitInfra(config)&#10;&#9;ctrl := controller.NewController(config, inf)&#10;&#9;&#10;&#9;// Initialize repository manager&#10;&#9;repoManager := repository.NewRepositoryManager(inf.GetDB())&#10;&#9;&#10;&#9;// Initialize kanban controller&#10;&#9;kanbanCtrl := controller.NewColumnController(repoManager)&#10;&#10;&#9;r := gin.Default()&#10;&#10;&#9;apiRoutes := r.Group(&quot;/api/v2/kanban/&quot;)&#10;&#9;{&#10;&#9;&#9;apiRoutes.GET(&quot;/&quot;, ctrl.CheckHealth)&#10;&#9;&#9;&#10;&#9;&#9;// Kanban Board endpoints&#10;&#9;&#9;apiRoutes.GET(&quot;/board&quot;, kanbanCtrl.GetKanbanBoard)&#10;&#9;&#9;apiRoutes.GET(&quot;/tag-colors&quot;, kanbanCtrl.GetTagColors)&#10;&#9;&#9;&#10;&#9;&#9;// Column management&#10;&#9;&#9;apiRoutes.POST(&quot;/columns&quot;, kanbanCtrl.CreateColumn)&#10;&#9;&#9;apiRoutes.GET(&quot;/columns&quot;, kanbanCtrl.GetColumns)&#10;&#9;&#9;apiRoutes.PUT(&quot;/columns/:id&quot;, kanbanCtrl.UpdateColumn)&#10;&#9;&#9;apiRoutes.DELETE(&quot;/columns/:id&quot;, kanbanCtrl.DeleteColumn)&#10;&#9;&#9;apiRoutes.PATCH(&quot;/columns/:id/position&quot;, kanbanCtrl.UpdateColumnPosition)&#10;&#9;&#9;&#10;&#9;&#9;// Ticket management&#10;&#9;&#9;apiRoutes.POST(&quot;/tickets&quot;, kanbanCtrl.CreateTicket)&#10;&#9;&#9;apiRoutes.PUT(&quot;/tickets/:id&quot;, kanbanCtrl.UpdateTicket)&#10;&#9;&#9;apiRoutes.DELETE(&quot;/tickets/:id&quot;, kanbanCtrl.DeleteTicket)&#10;&#9;&#9;apiRoutes.PATCH(&quot;/tickets/move&quot;, kanbanCtrl.MoveTicketToColumn)&#10;&#9;}&#10;&#9;return r&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>