<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/README.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/README.md" />
              <option name="originalContent" value="# gau-kanban-service" />
              <option name="updatedContent" value="# Gau Kanban Service&#10;&#10;## Mô tả dự án&#10;&#10;Gau Kanban Service là một RESTful API service được xây dựng bằng Go để quản lý bảng Kanban. Dự án cung cấp các tính năng hoàn chỉnh để tạo và quản lý boards, columns, tickets, assignments và labels cho việc quản lý dự án theo phương pháp Kanban.&#10;&#10;## Tính năng chính&#10;&#10;### ️ Quản lý Columns&#10;- Tạo, sửa, xóa columns&#10;- Sắp xếp lại vị trí columns&#10;- Quản lý thứ tự hiển thị&#10;&#10;###  Quản lý Tickets&#10;- Tạo tickets với ticket number tự động (TASK-XXXX)&#10;- CRUD operations cho tickets&#10;- Di chuyển tickets giữa các columns&#10;- Drag &amp; drop với position management thông minh&#10;- Tự động sắp xếp vị trí khi tạo ticket mới (luôn ở cuối column)&#10;- Hỗ trợ due date và priority&#10;&#10;###  Quản lý Assignments&#10;- Gán người dùng vào tickets&#10;- Quản lý thông tin assignees (user_id, user_full_name)&#10;- Xóa assignments theo user hoặc ticket&#10;- Hiển thị assignees trong thông tin tickets&#10;&#10;### ️ Quản lý Labels&#10;- Tạo và quản lý labels với màu sắc&#10;- Gán labels vào tickets&#10;- Quản lý many-to-many relationship&#10;&#10;###  Quản lý Comments&#10;- Thêm comments vào tickets&#10;- Quản lý discussions cho từng ticket&#10;&#10;## Công nghệ sử dụng&#10;&#10;- **Backend**: Go (Golang) với Gin framework&#10;- **Database**: PostgreSQL với GORM ORM&#10;- **Migration**: golang-migrate&#10;- **Container**: Docker &amp; Docker Compose&#10;- **Architecture**: Clean Architecture với Repository pattern&#10;&#10;## Cấu trúc dự án&#10;&#10;```&#10;gau-kanban-service/&#10;├── main.go                 # Entry point&#10;├── Dockerfile             # Docker configuration&#10;├── entrypoint.sh          # Docker entrypoint script&#10;├── config/                # Configuration management&#10;├── controller/            # HTTP handlers&#10;├── entity/               # Database models&#10;├── repository/           # Data access layer&#10;├── routes/               # API routes definition&#10;├── migrations/           # Database migrations&#10;├── infra/                # Infrastructure setup&#10;└── utils/                # Utility functions&#10;```&#10;&#10;## API Endpoints&#10;&#10;### Column Management&#10;```&#10;POST   /api/v2/kanban/columns              # Tạo column mới&#10;GET    /api/v2/kanban/columns              # Lấy danh sách columns&#10;PUT    /api/v2/kanban/columns/:id          # Cập nhật column&#10;DELETE /api/v2/kanban/columns/:id          # Xóa column&#10;PATCH  /api/v2/kanban/columns/:id/position # Cập nhật vị trí column&#10;```&#10;&#10;### Ticket Management&#10;```&#10;POST   /api/v2/kanban/tickets                    # Tạo ticket mới&#10;GET    /api/v2/kanban/tickets                    # Lấy danh sách tickets&#10;GET    /api/v2/kanban/tickets/:id                # Lấy thông tin ticket&#10;PUT    /api/v2/kanban/tickets/:id                # Cập nhật ticket&#10;DELETE /api/v2/kanban/tickets/:id                # Xóa ticket&#10;PATCH  /api/v2/kanban/tickets/move               # Di chuyển ticket&#10;PATCH  /api/v2/kanban/tickets/move-with-position # Di chuyển ticket với vị trí cụ thể&#10;PATCH  /api/v2/kanban/tickets/:id/position       # Cập nhật vị trí ticket&#10;```&#10;&#10;### Assignment Management&#10;```&#10;POST   /api/v2/kanban/assignments                     # Tạo assignment&#10;PUT    /api/v2/kanban/assignments/:id                 # Cập nhật assignment&#10;DELETE /api/v2/kanban/assignments/:id                 # Xóa assignment&#10;DELETE /api/v2/kanban/users/:user_id/assignments      # Xóa tất cả assignments của user&#10;GET    /api/v2/kanban/tickets/:ticket_id/assignments  # Lấy assignments của ticket&#10;```&#10;&#10;### Kanban Board&#10;```&#10;GET    /api/v2/kanban/board       # Lấy toàn bộ kanban board&#10;GET    /api/v2/kanban/tag-colors  # Lấy màu sắc tags&#10;```&#10;&#10;## Cài đặt và chạy&#10;&#10;### Yêu cầu hệ thống&#10;- Go 1.23+&#10;- PostgreSQL 12+&#10;- Docker &amp; Docker Compose (optional)&#10;&#10;### Chạy với Docker&#10;```bash&#10;# Clone repository&#10;git clone &lt;repository-url&gt;&#10;cd gau-kanban-service&#10;&#10;# Chạy với Docker Compose&#10;docker-compose up -d&#10;&#10;# Service sẽ chạy trên port 8080&#10;```&#10;&#10;### Chạy development&#10;```bash&#10;# Cài đặt dependencies&#10;go mod tidy&#10;&#10;# Setup database (PostgreSQL)&#10;# Tạo database: gau_kanban&#10;&#10;# Chạy migrations&#10;migrate -path migrations -database &quot;postgres://username:password@localhost/gau_kanban?sslmode=disable&quot; up&#10;&#10;# Chạy service&#10;go run main.go&#10;```&#10;&#10;### Environment Variables&#10;```bash&#10;DB_HOST=localhost&#10;DB_PORT=5432&#10;DB_USER=postgres&#10;DB_PASSWORD=password&#10;DB_NAME=gau_kanban&#10;DB_SSLMODE=disable&#10;PORT=8080&#10;```&#10;&#10;## Tính năng nổi bật&#10;&#10;###  Smart Position Management&#10;- Tự động sắp xếp vị trí tickets khi drag &amp; drop&#10;- Hỗ trợ di chuyển giữa các columns với transaction safety&#10;- Tickets mới luôn được đặt ở cuối column&#10;&#10;###  Auto Ticket Numbering&#10;- Tự động tạo ticket number theo format TASK-XXXX&#10;- Unique và sequential numbering&#10;&#10;###  Rich Data Response&#10;- API responses bao gồm đầy đủ thông tin assignees&#10;- Nested data cho kanban board view&#10;- Optimized queries cho performance&#10;&#10;### ️ Data Integrity&#10;- Database constraints và foreign keys&#10;- Transaction handling cho complex operations&#10;- Error handling và validation&#10;&#10;## Database Schema&#10;&#10;### Core Tables&#10;- `columns`: Quản lý các cột kanban&#10;- `tickets`: Quản lý các tickets/tasks&#10;- `task_assignments`: Gán người dùng vào tickets&#10;- `labels`: Quản lý labels/tags&#10;- `ticket_labels`: Many-to-many relationship&#10;- `ticket_comments`: Comments cho tickets&#10;&#10;### Key Features&#10;- UUID primary keys&#10;- Timestamps tracking&#10;- Position-based ordering&#10;- Cascading deletes&#10;&#10;## Migration Management&#10;&#10;```bash&#10;# Tạo migration mới&#10;migrate create -ext sql -dir migrations -seq migration_name&#10;&#10;# Chạy migrations&#10;migrate -path migrations -database $DATABASE_URL up&#10;&#10;# Rollback migration&#10;migrate -path migrations -database $DATABASE_URL down 1&#10;```&#10;&#10;## API Examples&#10;&#10;### Tạo ticket mới&#10;```bash&#10;curl -X POST http://localhost:8080/api/v2/kanban/tickets \&#10;  -H &quot;Content-Type: application/json&quot; \&#10;  -d '{&#10;    &quot;column_id&quot;: &quot;uuid-column-id&quot;,&#10;    &quot;title&quot;: &quot;New task&quot;,&#10;    &quot;description&quot;: &quot;Task description&quot;,&#10;    &quot;priority&quot;: &quot;HIGH&quot;&#10;  }'&#10;```&#10;&#10;### Di chuyển ticket với position&#10;```bash&#10;curl -X PATCH http://localhost:8080/api/v2/kanban/tickets/move-with-position \&#10;  -H &quot;Content-Type: application/json&quot; \&#10;  -d '{&#10;    &quot;ticket_id&quot;: &quot;uuid-ticket-id&quot;,&#10;    &quot;column_id&quot;: &quot;uuid-column-id&quot;,&#10;    &quot;position&quot;: 2&#10;  }'&#10;```&#10;&#10;### Tạo assignment&#10;```bash&#10;curl -X POST http://localhost:8080/api/v2/kanban/assignments \&#10;  -H &quot;Content-Type: application/json&quot; \&#10;  -d '{&#10;    &quot;ticket_id&quot;: &quot;uuid-ticket-id&quot;,&#10;    &quot;user_id&quot;: &quot;uuid-user-id&quot;,&#10;    &quot;user_full_name&quot;: &quot;Nguyễn Văn A&quot;&#10;  }'&#10;```&#10;&#10;## Contributing&#10;&#10;1. Fork the repository&#10;2. Create feature branch (`git checkout -b feature/amazing-feature`)&#10;3. Commit changes (`git commit -m 'Add amazing feature'`)&#10;4. Push to branch (`git push origin feature/amazing-feature`)&#10;5. Open a Pull Request&#10;&#10;## License&#10;&#10;This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.&#10;&#10;## Support&#10;&#10;Nếu có vấn đề hoặc câu hỏi, vui lòng tạo issue trong repository này.&#10;&#10;---&#10;&#10;**Phát triển bởi Gau Team** " />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/controller/column.go">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/controller/column.go" />
              <option name="originalContent" value="package controller&#10;&#10;import (&#10;&#9;&quot;github.com/gin-gonic/gin&quot;&#10;&#9;&quot;github.com/tnqbao/gau-kanban-service/entity&quot;&#10;&#9;&quot;github.com/tnqbao/gau-kanban-service/utils&quot;&#10;)&#10;&#10;// CreateColumn tạo column mới&#10;func (ctrl *Controller) CreateColumn(c *gin.Context) {&#10;&#9;var req CreateColumnRequest&#10;&#9;if err := c.ShouldBindJSON(&amp;req); err != nil {&#10;&#9;&#9;utils.JSON400(c, &quot;Invalid request body: &quot;+err.Error())&#10;&#9;&#9;return&#10;&#9;}&#10;&#10;&#9;column := &amp;entity.Column{&#10;&#9;&#9;Name:     req.Name,&#10;&#9;&#9;Position: req.Position,&#10;&#9;}&#10;&#10;&#9;if err := ctrl.Repository.CreateColumn(column); err != nil {&#10;&#9;&#9;utils.JSON500(c, err.Error())&#10;&#9;&#9;return&#10;&#9;}&#10;&#10;&#9;utils.JSON200(c, gin.H{&#10;&#9;&#9;&quot;message&quot;: &quot;Column created suctrlessfully&quot;,&#10;&#9;&#9;&quot;data&quot;:    column,&#10;&#9;})&#10;}&#10;&#10;// UpdateColumn cập nhật thông tin column&#10;func (ctrl *Controller) UpdateColumn(c *gin.Context) {&#10;&#9;id := c.Param(&quot;id&quot;)&#10;&#9;var req UpdateColumnRequest&#10;&#9;if err := c.ShouldBindJSON(&amp;req); err != nil {&#10;&#9;&#9;utils.JSON400(c, &quot;Invalid request body: &quot;+err.Error())&#10;&#9;&#9;return&#10;&#9;}&#10;&#10;&#9;column, err := ctrl.Repository.GetColumnByID(id)&#10;&#9;if err != nil {&#10;&#9;&#9;utils.JSON404(c, &quot;Column not found&quot;)&#10;&#9;&#9;return&#10;&#9;}&#10;&#10;&#9;if req.Name != &quot;&quot; {&#10;&#9;&#9;column.Name = req.Name&#10;&#9;}&#10;&#9;if req.Position != nil {&#10;&#9;&#9;column.Position = *req.Position&#10;&#9;}&#10;&#10;&#9;if err := ctrl.Repository.UpdateColumn(column); err != nil {&#10;&#9;&#9;utils.JSON500(c, err.Error())&#10;&#9;&#9;return&#10;&#9;}&#10;&#10;&#9;utils.JSON200(c, gin.H{&#10;&#9;&#9;&quot;message&quot;: &quot;Column updated suctrlessfully&quot;,&#10;&#9;&#9;&quot;data&quot;:    column,&#10;&#9;})&#10;}&#10;&#10;// DeleteColumn xóa column&#10;func (ctrl *Controller) DeleteColumn(c *gin.Context) {&#10;&#9;id := c.Param(&quot;id&quot;)&#10;&#10;&#9;if err := ctrl.Repository.DeleteColumn(id); err != nil {&#10;&#9;&#9;utils.JSON500(c, err.Error())&#10;&#9;&#9;return&#10;&#9;}&#10;&#10;&#9;utils.JSON200(c, gin.H{&#10;&#9;&#9;&quot;message&quot;: &quot;Column deleted suctrlessfully&quot;,&#10;&#9;})&#10;}&#10;&#10;// GetColumns lấy danh sách tất cả columns&#10;func (ctrl *Controller) GetColumns(c *gin.Context) {&#10;&#9;columns, err := ctrl.Repository.GetAllColumn()&#10;&#9;if err != nil {&#10;&#9;&#9;utils.JSON500(c, err.Error())&#10;&#9;&#9;return&#10;&#9;}&#10;&#10;&#9;utils.JSON200(c, gin.H{&#10;&#9;&#9;&quot;data&quot;: columns,&#10;&#9;})&#10;}&#10;&#10;// UpdateColumnPosition thay đổi vị trí column&#10;func (ctrl *Controller) UpdateColumnPosition(c *gin.Context) {&#10;&#9;id := c.Param(&quot;id&quot;)&#10;&#9;var req UpdateColumnPositionRequest&#10;&#9;if err := c.ShouldBindJSON(&amp;req); err != nil {&#10;&#9;&#9;utils.JSON400(c, &quot;Invalid request body: &quot;+err.Error())&#10;&#9;&#9;return&#10;&#9;}&#10;&#10;&#9;if err := ctrl.Repository.UpdateColumnPosition(id, req.Position); err != nil {&#10;&#9;&#9;utils.JSON500(c, err.Error())&#10;&#9;&#9;return&#10;&#9;}&#10;&#10;&#9;utils.JSON200(c, gin.H{&#10;&#9;&#9;&quot;message&quot;: &quot;Column position updated suctrlessfully&quot;,&#10;&#9;})&#10;}&#10;&#10;// Request/Response structures&#10;type KanbanColumnResponse struct {&#10;&#9;ID      string                 `json:&quot;id&quot;`&#10;&#9;Title   string                 `json:&quot;title&quot;`&#10;&#9;Order   int                    `json:&quot;order&quot;`&#10;&#9;Tickets []KanbanTicketResponse `json:&quot;tickets&quot;`&#10;}&#10;&#10;type KanbanTicketResponse struct {&#10;&#9;ID          string   `json:&quot;id&quot;`&#10;&#9;Title       string   `json:&quot;title&quot;`&#10;&#9;Description string   `json:&quot;description&quot;`&#10;&#9;TicketNo    string   `json:&quot;ticketNo&quot;`&#10;&#9;Tags        []string `json:&quot;tags&quot;`&#10;&#9;Assignees   []string `json:&quot;assignees&quot;`&#10;&#9;Completed   bool     `json:&quot;completed&quot;`&#10;&#9;DueDate     string   `json:&quot;due_date,omitempty&quot;`&#10;&#9;Priority    string   `json:&quot;priority,omitempty&quot;`&#10;}&#10;&#10;type CreateColumnRequest struct {&#10;&#9;Name     string `json:&quot;name&quot; binding:&quot;required&quot;`&#10;&#9;Position int    `json:&quot;position&quot;`&#10;}&#10;&#10;type UpdateColumnRequest struct {&#10;&#9;Name     string `json:&quot;name&quot;`&#10;&#9;Position *int   `json:&quot;position&quot;`&#10;}&#10;&#10;type UpdateColumnPositionRequest struct {&#10;&#9;Position int `json:&quot;position&quot; binding:&quot;required&quot;`&#10;}&#10;&#10;type MoveTicketRequest struct {&#10;&#9;TicketID string `json:&quot;ticket_id&quot; binding:&quot;required&quot;`&#10;&#9;ColumnID string `json:&quot;column_id&quot; binding:&quot;required&quot;`&#10;}&#10;&#10;type UpdateTicketPositionRequest struct {&#10;&#9;Position int `json:&quot;position&quot; binding:&quot;required&quot;`&#10;}&#10;&#10;type CreateAssignmentRequest struct {&#10;&#9;TicketID     string `json:&quot;ticket_id&quot; binding:&quot;required&quot;`&#10;&#9;UserID       string `json:&quot;user_id&quot; binding:&quot;required&quot;`&#10;&#9;UserFullName string `json:&quot;user_full_name&quot; binding:&quot;required&quot;`&#10;}&#10;&#10;type UpdateAssignmentRequest struct {&#10;&#9;UserFullName string `json:&quot;user_full_name&quot;`&#10;}&#10;&#10;type CreateTicketRequest struct {&#10;&#9;ColumnID    string `json:&quot;column_id&quot; binding:&quot;required&quot;`&#10;&#9;Title       string `json:&quot;title&quot; binding:&quot;required&quot;`&#10;&#9;Description string `json:&quot;description&quot;`&#10;&#9;DueDate     string `json:&quot;due_date&quot;`&#10;&#9;Priority    string `json:&quot;priority&quot;`&#10;}&#10;&#10;type UpdateTicketRequest struct {&#10;&#9;Title       string `json:&quot;title&quot;`&#10;&#9;Description string `json:&quot;description&quot;`&#10;&#9;DueDate     string `json:&quot;due_date&quot;`&#10;&#9;Priority    string `json:&quot;priority&quot;`&#10;}&#10;" />
              <option name="updatedContent" value="package controller&#10;&#10;import (&#10;&#9;&quot;github.com/gin-gonic/gin&quot;&#10;&#9;&quot;github.com/tnqbao/gau-kanban-service/entity&quot;&#10;&#9;&quot;github.com/tnqbao/gau-kanban-service/utils&quot;&#10;)&#10;&#10;// CreateColumn tạo column mới&#10;func (ctrl *Controller) CreateColumn(c *gin.Context) {&#10;&#9;var req CreateColumnRequest&#10;&#9;if err := c.ShouldBindJSON(&amp;req); err != nil {&#10;&#9;&#9;utils.JSON400(c, &quot;Invalid request body: &quot;+err.Error())&#10;&#9;&#9;return&#10;&#9;}&#10;&#10;&#9;column := &amp;entity.Column{&#10;&#9;&#9;Name:     req.Name,&#10;&#9;&#9;Position: req.Position,&#10;&#9;}&#10;&#10;&#9;if err := ctrl.Repository.CreateColumn(column); err != nil {&#10;&#9;&#9;utils.JSON500(c, err.Error())&#10;&#9;&#9;return&#10;&#9;}&#10;&#10;&#9;utils.JSON200(c, gin.H{&#10;&#9;&#9;&quot;message&quot;: &quot;Column created suctrlessfully&quot;,&#10;&#9;&#9;&quot;data&quot;:    column,&#10;&#9;})&#10;}&#10;&#10;// UpdateColumn cập nhật thông tin column&#10;func (ctrl *Controller) UpdateColumn(c *gin.Context) {&#10;&#9;id := c.Param(&quot;id&quot;)&#10;&#9;var req UpdateColumnRequest&#10;&#9;if err := c.ShouldBindJSON(&amp;req); err != nil {&#10;&#9;&#9;utils.JSON400(c, &quot;Invalid request body: &quot;+err.Error())&#10;&#9;&#9;return&#10;&#9;}&#10;&#10;&#9;column, err := ctrl.Repository.GetColumnByID(id)&#10;&#9;if err != nil {&#10;&#9;&#9;utils.JSON404(c, &quot;Column not found&quot;)&#10;&#9;&#9;return&#10;&#9;}&#10;&#10;&#9;if req.Name != &quot;&quot; {&#10;&#9;&#9;column.Name = req.Name&#10;&#9;}&#10;&#9;if req.Position != nil {&#10;&#9;&#9;column.Position = *req.Position&#10;&#9;}&#10;&#10;&#9;if err := ctrl.Repository.UpdateColumn(column); err != nil {&#10;&#9;&#9;utils.JSON500(c, err.Error())&#10;&#9;&#9;return&#10;&#9;}&#10;&#10;&#9;utils.JSON200(c, gin.H{&#10;&#9;&#9;&quot;message&quot;: &quot;Column updated suctrlessfully&quot;,&#10;&#9;&#9;&quot;data&quot;:    column,&#10;&#9;})&#10;}&#10;&#10;// DeleteColumn xóa column&#10;func (ctrl *Controller) DeleteColumn(c *gin.Context) {&#10;&#9;id := c.Param(&quot;id&quot;)&#10;&#10;&#9;if err := ctrl.Repository.DeleteColumn(id); err != nil {&#10;&#9;&#9;utils.JSON500(c, err.Error())&#10;&#9;&#9;return&#10;&#9;}&#10;&#10;&#9;utils.JSON200(c, gin.H{&#10;&#9;&#9;&quot;message&quot;: &quot;Column deleted suctrlessfully&quot;,&#10;&#9;})&#10;}&#10;&#10;// GetColumns lấy danh sách tất cả columns&#10;func (ctrl *Controller) GetColumns(c *gin.Context) {&#10;&#9;columns, err := ctrl.Repository.GetAllColumn()&#10;&#9;if err != nil {&#10;&#9;&#9;utils.JSON500(c, err.Error())&#10;&#9;&#9;return&#10;&#9;}&#10;&#10;&#9;utils.JSON200(c, gin.H{&#10;&#9;&#9;&quot;data&quot;: columns,&#10;&#9;})&#10;}&#10;&#10;// UpdateColumnPosition thay đổi vị trí column&#10;func (ctrl *Controller) UpdateColumnPosition(c *gin.Context) {&#10;&#9;id := c.Param(&quot;id&quot;)&#10;&#9;var req UpdateColumnPositionRequest&#10;&#9;if err := c.ShouldBindJSON(&amp;req); err != nil {&#10;&#9;&#9;utils.JSON400(c, &quot;Invalid request body: &quot;+err.Error())&#10;&#9;&#9;return&#10;&#9;}&#10;&#10;&#9;if err := ctrl.Repository.UpdateColumnPosition(id, req.Position); err != nil {&#10;&#9;&#9;utils.JSON500(c, err.Error())&#10;&#9;&#9;return&#10;&#9;}&#10;&#10;&#9;utils.JSON200(c, gin.H{&#10;&#9;&#9;&quot;message&quot;: &quot;Column position updated suctrlessfully&quot;,&#10;&#9;})&#10;}&#10;&#10;// Request/Response structures&#10;type KanbanColumnResponse struct {&#10;&#9;ID      string                 `json:&quot;id&quot;`&#10;&#9;Title   string                 `json:&quot;title&quot;`&#10;&#9;Order   int                    `json:&quot;order&quot;`&#10;&#9;Tickets []KanbanTicketResponse `json:&quot;tickets&quot;`&#10;}&#10;&#10;type KanbanTicketResponse struct {&#10;&#9;ID          string   `json:&quot;id&quot;`&#10;&#9;Title       string   `json:&quot;title&quot;`&#10;&#9;Description string   `json:&quot;description&quot;`&#10;&#9;TicketNo    string   `json:&quot;ticketNo&quot;`&#10;&#9;Tags        []string `json:&quot;tags&quot;`&#10;&#9;Assignees   []string `json:&quot;assignees&quot;`&#10;&#9;Completed   bool     `json:&quot;completed&quot;`&#10;&#9;DueDate     string   `json:&quot;due_date,omitempty&quot;`&#10;&#9;Priority    string   `json:&quot;priority,omitempty&quot;`&#10;}&#10;&#10;type CreateColumnRequest struct {&#10;&#9;Name     string `json:&quot;name&quot; binding:&quot;required&quot;`&#10;&#9;Position int    `json:&quot;position&quot;`&#10;}&#10;&#10;type UpdateColumnRequest struct {&#10;&#9;Name     string `json:&quot;name&quot;`&#10;&#9;Position *int   `json:&quot;position&quot;`&#10;}&#10;&#10;type UpdateColumnPositionRequest struct {&#10;&#9;Position int `json:&quot;position&quot; binding:&quot;required&quot;`&#10;}&#10;&#10;type MoveTicketRequest struct {&#10;&#9;TicketID string `json:&quot;ticket_id&quot; binding:&quot;required&quot;`&#10;&#9;ColumnID string `json:&quot;column_id&quot; binding:&quot;required&quot;`&#10;}&#10;&#10;type MoveTicketWithPositionRequest struct {&#10;&#9;TicketID  string `json:&quot;ticket_id&quot; binding:&quot;required&quot;`&#10;&#9;ColumnID  string `json:&quot;column_id&quot; binding:&quot;required&quot;`&#10;&#9;Position  int    `json:&quot;position&quot; binding:&quot;required&quot;`&#10;}&#10;&#10;type UpdateTicketPositionRequest struct {&#10;&#9;Position int `json:&quot;position&quot; binding:&quot;required&quot;`&#10;}&#10;&#10;type CreateAssignmentRequest struct {&#10;&#9;TicketID     string `json:&quot;ticket_id&quot; binding:&quot;required&quot;`&#10;&#9;UserID       string `json:&quot;user_id&quot; binding:&quot;required&quot;`&#10;&#9;UserFullName string `json:&quot;user_full_name&quot; binding:&quot;required&quot;`&#10;}&#10;&#10;type UpdateAssignmentRequest struct {&#10;&#9;UserFullName string `json:&quot;user_full_name&quot;`&#10;}&#10;&#10;type CreateTicketRequest struct {&#10;&#9;ColumnID    string `json:&quot;column_id&quot; binding:&quot;required&quot;`&#10;&#9;Title       string `json:&quot;title&quot; binding:&quot;required&quot;`&#10;&#9;Description string `json:&quot;description&quot;`&#10;&#9;DueDate     string `json:&quot;due_date&quot;`&#10;&#9;Priority    string `json:&quot;priority&quot;`&#10;}&#10;&#10;type UpdateTicketRequest struct {&#10;&#9;Title       string `json:&quot;title&quot;`&#10;&#9;Description string `json:&quot;description&quot;`&#10;&#9;DueDate     string `json:&quot;due_date&quot;`&#10;&#9;Priority    string `json:&quot;priority&quot;`&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/controller/ticket.go">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/controller/ticket.go" />
              <option name="originalContent" value="package controller&#10;&#10;import (&#10;&#9;&quot;github.com/gin-gonic/gin&quot;&#10;&#9;&quot;github.com/tnqbao/gau-kanban-service/entity&quot;&#10;&#9;&quot;github.com/tnqbao/gau-kanban-service/utils&quot;&#10;)&#10;&#10;// MoveTicketToColumn di chuyển ticket sang column khác&#10;func (ctrl *Controller) MoveTicketToColumn(c *gin.Context) {&#10;&#9;var req MoveTicketRequest&#10;&#9;if err := c.ShouldBindJSON(&amp;req); err != nil {&#10;&#9;&#9;utils.JSON400(c, &quot;Invalid request body: &quot;+err.Error())&#10;&#9;&#9;return&#10;&#9;}&#10;&#10;&#9;if err := ctrl.Repository.MoveTicketToColumn(req.TicketID, req.ColumnID); err != nil {&#10;&#9;&#9;utils.JSON500(c, err.Error())&#10;&#9;&#9;return&#10;&#9;}&#10;&#10;&#9;utils.JSON200(c, gin.H{&#10;&#9;&#9;&quot;message&quot;: &quot;Ticket moved suctrlessfully&quot;,&#10;&#9;})&#10;}&#10;&#10;// MoveTicketWithPosition di chuyển ticket sang column khác với position cụ thể&#10;func (ctrl *Controller) MoveTicketWithPosition(c *gin.Context) {&#10;&#9;var req MoveTicketWithPositionRequest&#10;&#9;if err := c.ShouldBindJSON(&amp;req); err != nil {&#10;&#9;&#9;utils.JSON400(c, &quot;Invalid request body: &quot;+err.Error())&#10;&#9;&#9;return&#10;&#9;}&#10;&#10;&#9;// Kiểm tra ticket có tồn tại không&#10;&#9;_, err := ctrl.Repository.GetTicketByID(req.TicketID)&#10;&#9;if err != nil {&#10;&#9;&#9;utils.JSON404(c, &quot;Ticket not found&quot;)&#10;&#9;&#9;return&#10;&#9;}&#10;&#10;&#9;// Kiểm tra column có tồn tại không&#10;&#9;_, err = ctrl.Repository.GetColumnByID(req.ColumnID)&#10;&#9;if err != nil {&#10;&#9;&#9;utils.JSON404(c, &quot;Column not found&quot;)&#10;&#9;&#9;return&#10;&#9;}&#10;&#10;&#9;if err := ctrl.Repository.MoveTicketToColumnWithPosition(req.TicketID, req.ColumnID, req.Position); err != nil {&#10;&#9;&#9;utils.JSON500(c, err.Error())&#10;&#9;&#9;return&#10;&#9;}&#10;&#10;&#9;utils.JSON200(c, gin.H{&#10;&#9;&#9;&quot;message&quot;: &quot;Ticket moved with position successfully&quot;,&#10;&#9;})&#10;}&#10;&#10;// CreateTicket tạo ticket mới trong column&#10;func (ctrl *Controller) CreateTicket(c *gin.Context) {&#10;&#9;var req CreateTicketRequest&#10;&#9;if err := c.ShouldBindJSON(&amp;req); err != nil {&#10;&#9;&#9;utils.JSON400(c, &quot;Invalid request body: &quot;+err.Error())&#10;&#9;&#9;return&#10;&#9;}&#10;&#10;&#9;ticket := &amp;entity.Ticket{&#10;&#9;&#9;ColumnID:    req.ColumnID,&#10;&#9;&#9;Title:       req.Title,&#10;&#9;&#9;Description: req.Description,&#10;&#9;&#9;DueDate:     req.DueDate,&#10;&#9;&#9;Priority:    req.Priority,&#10;&#9;}&#10;&#10;&#9;if err := ctrl.Repository.CreateTicket(ticket); err != nil {&#10;&#9;&#9;utils.JSON500(c, err.Error())&#10;&#9;&#9;return&#10;&#9;}&#10;&#10;&#9;utils.JSON200(c, gin.H{&#10;&#9;&#9;&quot;message&quot;: &quot;Ticket created suctrlessfully&quot;,&#10;&#9;&#9;&quot;data&quot;:    ticket,&#10;&#9;})&#10;}&#10;&#10;// UpdateTicket cập nhật thông tin ticket&#10;func (ctrl *Controller) UpdateTicket(c *gin.Context) {&#10;&#9;id := c.Param(&quot;id&quot;)&#10;&#9;var req UpdateTicketRequest&#10;&#9;if err := c.ShouldBindJSON(&amp;req); err != nil {&#10;&#9;&#9;utils.JSON400(c, &quot;Invalid request body: &quot;+err.Error())&#10;&#9;&#9;return&#10;&#9;}&#10;&#10;&#9;ticket, err := ctrl.Repository.GetTicketByID(id)&#10;&#9;if err != nil {&#10;&#9;&#9;utils.JSON404(c, &quot;Ticket not found&quot;)&#10;&#9;&#9;return&#10;&#9;}&#10;&#10;&#9;if req.Title != &quot;&quot; {&#10;&#9;&#9;ticket.Title = req.Title&#10;&#9;}&#10;&#9;if req.Description != &quot;&quot; {&#10;&#9;&#9;ticket.Description = req.Description&#10;&#9;}&#10;&#9;if req.DueDate != &quot;&quot; {&#10;&#9;&#9;ticket.DueDate = req.DueDate&#10;&#9;}&#10;&#9;if req.Priority != &quot;&quot; {&#10;&#9;&#9;ticket.Priority = req.Priority&#10;&#9;}&#10;&#10;&#9;if err := ctrl.Repository.UpdateTicket(ticket); err != nil {&#10;&#9;&#9;utils.JSON500(c, err.Error())&#10;&#9;&#9;return&#10;&#9;}&#10;&#10;&#9;utils.JSON200(c, gin.H{&#10;&#9;&#9;&quot;message&quot;: &quot;Ticket updated suctrlessfully&quot;,&#10;&#9;&#9;&quot;data&quot;:    ticket,&#10;&#9;})&#10;}&#10;&#10;// DeleteTicket xóa ticket&#10;func (ctrl *Controller) DeleteTicket(c *gin.Context) {&#10;&#9;id := c.Param(&quot;id&quot;)&#10;&#10;&#9;if err := ctrl.Repository.DeleteTicket(id); err != nil {&#10;&#9;&#9;utils.JSON500(c, err.Error())&#10;&#9;&#9;return&#10;&#9;}&#10;&#10;&#9;utils.JSON200(c, gin.H{&#10;&#9;&#9;&quot;message&quot;: &quot;Ticket deleted suctrlessfully&quot;,&#10;&#9;})&#10;}&#10;&#10;// UpdateTicketPosition cập nhật vị trí của ticket trong column&#10;func (ctrl *Controller) UpdateTicketPosition(c *gin.Context) {&#10;&#9;ticketID := c.Param(&quot;id&quot;)&#10;&#9;var req UpdateTicketPositionRequest&#10;&#9;if err := c.ShouldBindJSON(&amp;req); err != nil {&#10;&#9;&#9;utils.JSON400(c, &quot;Invalid request body: &quot;+err.Error())&#10;&#9;&#9;return&#10;&#9;}&#10;&#10;&#9;// Kiểm tra ticket có tồn tại không&#10;&#9;_, err := ctrl.Repository.GetTicketByID(ticketID)&#10;&#9;if err != nil {&#10;&#9;&#9;utils.JSON404(c, &quot;Ticket not found&quot;)&#10;&#9;&#9;return&#10;&#9;}&#10;&#10;&#9;if err := ctrl.Repository.UpdateTicketPosition(ticketID, req.Position); err != nil {&#10;&#9;&#9;utils.JSON500(c, err.Error())&#10;&#9;&#9;return&#10;&#9;}&#10;&#10;&#9;utils.JSON200(c, gin.H{&#10;&#9;&#9;&quot;message&quot;: &quot;Ticket position updated successfully&quot;,&#10;&#9;})&#10;}&#10;&#10;// GetTicket lấy thông tin ticket theo ID với assignees&#10;func (ctrl *Controller) GetTicket(c *gin.Context) {&#10;&#9;id := c.Param(&quot;id&quot;)&#10;&#10;&#9;ticket, assignments, err := ctrl.Repository.GetTicketWithAssignments(id)&#10;&#9;if err != nil {&#10;&#9;&#9;utils.JSON404(c, &quot;Ticket not found&quot;)&#10;&#9;&#9;return&#10;&#9;}&#10;&#10;&#9;// Tạo response với ticket và assignees&#10;&#9;response := gin.H{&#10;&#9;&#9;&quot;id&quot;:          ticket.ID,&#10;&#9;&#9;&quot;ticket_no&quot;:   ticket.TicketNo,&#10;&#9;&#9;&quot;column_id&quot;:   ticket.ColumnID,&#10;&#9;&#9;&quot;title&quot;:       ticket.Title,&#10;&#9;&#9;&quot;description&quot;: ticket.Description,&#10;&#9;&#9;&quot;due_date&quot;:    ticket.DueDate,&#10;&#9;&#9;&quot;priority&quot;:    ticket.Priority,&#10;&#9;&#9;&quot;position&quot;:    ticket.Position,&#10;&#9;&#9;&quot;created_at&quot;:  ticket.CreatedAt,&#10;&#9;&#9;&quot;updated_at&quot;:  ticket.UpdatedAt,&#10;&#9;&#9;&quot;assignees&quot;:   assignments,&#10;&#9;}&#10;&#10;&#9;utils.JSON200(c, gin.H{&#10;&#9;&#9;&quot;data&quot;: response,&#10;&#9;})&#10;}&#10;&#10;// GetTickets lấy danh sách tất cả tickets&#10;func (ctrl *Controller) GetTickets(c *gin.Context) {&#10;&#9;tickets, err := ctrl.Repository.GetAllTicket()&#10;&#9;if err != nil {&#10;&#9;&#9;utils.JSON500(c, err.Error())&#10;&#9;&#9;return&#10;&#9;}&#10;&#10;&#9;utils.JSON200(c, gin.H{&#10;&#9;&#9;&quot;data&quot;: tickets,&#10;&#9;})&#10;}&#10;" />
              <option name="updatedContent" value="package controller&#10;&#10;import (&#10;&#9;&quot;github.com/gin-gonic/gin&quot;&#10;&#9;&quot;github.com/tnqbao/gau-kanban-service/entity&quot;&#10;&#9;&quot;github.com/tnqbao/gau-kanban-service/utils&quot;&#10;)&#10;&#10;// MoveTicketToColumn di chuyển ticket sang column khác&#10;func (ctrl *Controller) MoveTicketToColumn(c *gin.Context) {&#10;&#9;var req MoveTicketRequest&#10;&#9;if err := c.ShouldBindJSON(&amp;req); err != nil {&#10;&#9;&#9;utils.JSON400(c, &quot;Invalid request body: &quot;+err.Error())&#10;&#9;&#9;return&#10;&#9;}&#10;&#10;&#9;if err := ctrl.Repository.MoveTicketToColumn(req.TicketID, req.ColumnID); err != nil {&#10;&#9;&#9;utils.JSON500(c, err.Error())&#10;&#9;&#9;return&#10;&#9;}&#10;&#10;&#9;utils.JSON200(c, gin.H{&#10;&#9;&#9;&quot;message&quot;: &quot;Ticket moved suctrlessfully&quot;,&#10;&#9;})&#10;}&#10;&#10;// MoveTicketWithPosition di chuyển ticket sang column khác với position cụ thể&#10;func (ctrl *Controller) MoveTicketWithPosition(c *gin.Context) {&#10;&#9;var req MoveTicketWithPositionRequest&#10;&#9;if err := c.ShouldBindJSON(&amp;req); err != nil {&#10;&#9;&#9;utils.JSON400(c, &quot;Invalid request body: &quot;+err.Error())&#10;&#9;&#9;return&#10;&#9;}&#10;&#10;&#9;// Kiểm tra ticket có tồn tại không&#10;&#9;_, err := ctrl.Repository.GetTicketByID(req.TicketID)&#10;&#9;if err != nil {&#10;&#9;&#9;utils.JSON404(c, &quot;Ticket not found&quot;)&#10;&#9;&#9;return&#10;&#9;}&#10;&#10;&#9;// Kiểm tra column có tồn tại không&#10;&#9;_, err = ctrl.Repository.GetColumnByID(req.ColumnID)&#10;&#9;if err != nil {&#10;&#9;&#9;utils.JSON404(c, &quot;Column not found&quot;)&#10;&#9;&#9;return&#10;&#9;}&#10;&#10;&#9;if err := ctrl.Repository.MoveTicketToColumnWithPosition(req.TicketID, req.ColumnID, req.Position); err != nil {&#10;&#9;&#9;utils.JSON500(c, err.Error())&#10;&#9;&#9;return&#10;&#9;}&#10;&#10;&#9;utils.JSON200(c, gin.H{&#10;&#9;&#9;&quot;message&quot;: &quot;Ticket moved with position successfully&quot;,&#10;&#9;})&#10;}&#10;&#10;// CreateTicket tạo ticket mới trong column&#10;func (ctrl *Controller) CreateTicket(c *gin.Context) {&#10;&#9;var req CreateTicketRequest&#10;&#9;if err := c.ShouldBindJSON(&amp;req); err != nil {&#10;&#9;&#9;utils.JSON400(c, &quot;Invalid request body: &quot;+err.Error())&#10;&#9;&#9;return&#10;&#9;}&#10;&#10;&#9;ticket := &amp;entity.Ticket{&#10;&#9;&#9;ColumnID:    req.ColumnID,&#10;&#9;&#9;Title:       req.Title,&#10;&#9;&#9;Description: req.Description,&#10;&#9;&#9;DueDate:     req.DueDate,&#10;&#9;&#9;Priority:    req.Priority,&#10;&#9;}&#10;&#10;&#9;if err := ctrl.Repository.CreateTicket(ticket); err != nil {&#10;&#9;&#9;utils.JSON500(c, err.Error())&#10;&#9;&#9;return&#10;&#9;}&#10;&#10;&#9;utils.JSON200(c, gin.H{&#10;&#9;&#9;&quot;message&quot;: &quot;Ticket created suctrlessfully&quot;,&#10;&#9;&#9;&quot;data&quot;:    ticket,&#10;&#9;})&#10;}&#10;&#10;// UpdateTicket cập nhật thông tin ticket&#10;func (ctrl *Controller) UpdateTicket(c *gin.Context) {&#10;&#9;id := c.Param(&quot;id&quot;)&#10;&#9;var req UpdateTicketRequest&#10;&#9;if err := c.ShouldBindJSON(&amp;req); err != nil {&#10;&#9;&#9;utils.JSON400(c, &quot;Invalid request body: &quot;+err.Error())&#10;&#9;&#9;return&#10;&#9;}&#10;&#10;&#9;ticket, err := ctrl.Repository.GetTicketByID(id)&#10;&#9;if err != nil {&#10;&#9;&#9;utils.JSON404(c, &quot;Ticket not found&quot;)&#10;&#9;&#9;return&#10;&#9;}&#10;&#10;&#9;if req.Title != &quot;&quot; {&#10;&#9;&#9;ticket.Title = req.Title&#10;&#9;}&#10;&#9;if req.Description != &quot;&quot; {&#10;&#9;&#9;ticket.Description = req.Description&#10;&#9;}&#10;&#9;if req.DueDate != &quot;&quot; {&#10;&#9;&#9;ticket.DueDate = req.DueDate&#10;&#9;}&#10;&#9;if req.Priority != &quot;&quot; {&#10;&#9;&#9;ticket.Priority = req.Priority&#10;&#9;}&#10;&#10;&#9;if err := ctrl.Repository.UpdateTicket(ticket); err != nil {&#10;&#9;&#9;utils.JSON500(c, err.Error())&#10;&#9;&#9;return&#10;&#9;}&#10;&#10;&#9;utils.JSON200(c, gin.H{&#10;&#9;&#9;&quot;message&quot;: &quot;Ticket updated suctrlessfully&quot;,&#10;&#9;&#9;&quot;data&quot;:    ticket,&#10;&#9;})&#10;}&#10;&#10;// DeleteTicket xóa ticket&#10;func (ctrl *Controller) DeleteTicket(c *gin.Context) {&#10;&#9;id := c.Param(&quot;id&quot;)&#10;&#10;&#9;if err := ctrl.Repository.DeleteTicket(id); err != nil {&#10;&#9;&#9;utils.JSON500(c, err.Error())&#10;&#9;&#9;return&#10;&#9;}&#10;&#10;&#9;utils.JSON200(c, gin.H{&#10;&#9;&#9;&quot;message&quot;: &quot;Ticket deleted suctrlessfully&quot;,&#10;&#9;})&#10;}&#10;&#10;// UpdateTicketPosition cập nhật vị trí của ticket trong column&#10;func (ctrl *Controller) UpdateTicketPosition(c *gin.Context) {&#10;&#9;ticketID := c.Param(&quot;id&quot;)&#10;&#9;var req UpdateTicketPositionRequest&#10;&#9;if err := c.ShouldBindJSON(&amp;req); err != nil {&#10;&#9;&#9;utils.JSON400(c, &quot;Invalid request body: &quot;+err.Error())&#10;&#9;&#9;return&#10;&#9;}&#10;&#10;&#9;// Kiểm tra ticket có tồn tại không&#10;&#9;_, err := ctrl.Repository.GetTicketByID(ticketID)&#10;&#9;if err != nil {&#10;&#9;&#9;utils.JSON404(c, &quot;Ticket not found&quot;)&#10;&#9;&#9;return&#10;&#9;}&#10;&#10;&#9;if err := ctrl.Repository.UpdateTicketPosition(ticketID, req.Position); err != nil {&#10;&#9;&#9;utils.JSON500(c, err.Error())&#10;&#9;&#9;return&#10;&#9;}&#10;&#10;&#9;utils.JSON200(c, gin.H{&#10;&#9;&#9;&quot;message&quot;: &quot;Ticket position updated successfully&quot;,&#10;&#9;})&#10;}&#10;&#10;// GetTicket lấy thông tin ticket theo ID với assignees&#10;func (ctrl *Controller) GetTicket(c *gin.Context) {&#10;&#9;id := c.Param(&quot;id&quot;)&#10;&#10;&#9;ticket, assignments, err := ctrl.Repository.GetTicketWithAssignments(id)&#10;&#9;if err != nil {&#10;&#9;&#9;utils.JSON404(c, &quot;Ticket not found&quot;)&#10;&#9;&#9;return&#10;&#9;}&#10;&#10;&#9;// Tạo response với ticket và assignees&#10;&#9;response := gin.H{&#10;&#9;&#9;&quot;id&quot;:          ticket.ID,&#10;&#9;&#9;&quot;ticket_no&quot;:   ticket.TicketNo,&#10;&#9;&#9;&quot;column_id&quot;:   ticket.ColumnID,&#10;&#9;&#9;&quot;title&quot;:       ticket.Title,&#10;&#9;&#9;&quot;description&quot;: ticket.Description,&#10;&#9;&#9;&quot;due_date&quot;:    ticket.DueDate,&#10;&#9;&#9;&quot;priority&quot;:    ticket.Priority,&#10;&#9;&#9;&quot;position&quot;:    ticket.Position,&#10;&#9;&#9;&quot;created_at&quot;:  ticket.CreatedAt,&#10;&#9;&#9;&quot;updated_at&quot;:  ticket.UpdatedAt,&#10;&#9;&#9;&quot;assignees&quot;:   assignments,&#10;&#9;}&#10;&#10;&#9;utils.JSON200(c, gin.H{&#10;&#9;&#9;&quot;data&quot;: response,&#10;&#9;})&#10;}&#10;&#10;// GetTickets lấy danh sách tất cả tickets với assignees&#10;func (ctrl *Controller) GetTickets(c *gin.Context) {&#10;&#9;tickets, err := ctrl.Repository.GetAllTicket()&#10;&#9;if err != nil {&#10;&#9;&#9;utils.JSON500(c, err.Error())&#10;&#9;&#9;return&#10;&#9;}&#10;&#10;&#9;// Lấy assignees cho từng ticket&#10;&#9;var ticketsWithAssignees []gin.H&#10;&#9;for _, ticket := range tickets {&#10;&#9;&#9;assignments, err := ctrl.Repository.GetAssignmentsByTicketID(ticket.ID)&#10;&#9;&#9;if err != nil {&#10;&#9;&#9;&#9;// Nếu có lỗi khi lấy assignments, vẫn trả về ticket nhưng assignees rỗng&#10;&#9;&#9;&#9;assignments = []entity.TaskAssignment{}&#10;&#9;&#9;}&#10;&#10;&#9;&#9;ticketResponse := gin.H{&#10;&#9;&#9;&#9;&quot;id&quot;:          ticket.ID,&#10;&#9;&#9;&#9;&quot;ticket_no&quot;:   ticket.TicketNo,&#10;&#9;&#9;&#9;&quot;column_id&quot;:   ticket.ColumnID,&#10;&#9;&#9;&#9;&quot;title&quot;:       ticket.Title,&#10;&#9;&#9;&#9;&quot;description&quot;: ticket.Description,&#10;&#9;&#9;&#9;&quot;due_date&quot;:    ticket.DueDate,&#10;&#9;&#9;&#9;&quot;priority&quot;:    ticket.Priority,&#10;&#9;&#9;&#9;&quot;position&quot;:    ticket.Position,&#10;&#9;&#9;&#9;&quot;created_at&quot;:  ticket.CreatedAt,&#10;&#9;&#9;&#9;&quot;updated_at&quot;:  ticket.UpdatedAt,&#10;&#9;&#9;&#9;&quot;assignees&quot;:   assignments,&#10;&#9;&#9;}&#10;&#9;&#9;ticketsWithAssignees = append(ticketsWithAssignees, ticketResponse)&#10;&#9;}&#10;&#10;&#9;utils.JSON200(c, gin.H{&#10;&#9;&#9;&quot;data&quot;: ticketsWithAssignees,&#10;&#9;})&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/entity/ticket.go">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/entity/ticket.go" />
              <option name="originalContent" value="package entity&#10;&#10;type Ticket struct {&#10;&#9;ID          string `gorm:&quot;primaryKey;type:uuid;default:gen_random_uuid()&quot; json:&quot;id&quot;`&#10;&#9;ColumnID    string `gorm:&quot;type:uuid;not null&quot; json:&quot;column_id&quot;`&#10;&#9;Title       string `gorm:&quot;type:text;not null&quot; json:&quot;title&quot;`&#10;&#9;Description string `gorm:&quot;type:text&quot; json:&quot;description&quot;`&#10;&#9;DueDate     string `gorm:&quot;type:date&quot; json:&quot;due_date&quot;`&#10;&#9;Priority    string `gorm:&quot;type:text&quot; json:&quot;priority&quot;`&#10;&#9;Position    int    `gorm:&quot;type:integer;default:0&quot; json:&quot;position&quot;`&#10;&#9;CreatedAt   string `gorm:&quot;type:timestamp with time zone;default:now()&quot; json:&quot;created_at&quot;`&#10;&#9;UpdatedAt   string `gorm:&quot;type:timestamp with time zone;default:now()&quot; json:&quot;updated_at&quot;`&#10;}&#10;&#10;func (Ticket) TableName() string {&#10;&#9;return &quot;tickets&quot;&#10;}&#10;" />
              <option name="updatedContent" value="package entity&#10;&#10;type Ticket struct {&#10;&#9;ID          string `gorm:&quot;primaryKey;type:uuid;default:gen_random_uuid()&quot; json:&quot;id&quot;`&#10;&#9;TicketNo    string `gorm:&quot;type:text;unique;not null&quot; json:&quot;ticket_no&quot;`&#10;&#9;ColumnID    string `gorm:&quot;type:uuid;not null&quot; json:&quot;column_id&quot;`&#10;&#9;Title       string `gorm:&quot;type:text;not null&quot; json:&quot;title&quot;`&#10;&#9;Description string `gorm:&quot;type:text&quot; json:&quot;description&quot;`&#10;&#9;DueDate     string `gorm:&quot;type:date&quot; json:&quot;due_date&quot;`&#10;&#9;Priority    string `gorm:&quot;type:text&quot; json:&quot;priority&quot;`&#10;&#9;Position    int    `gorm:&quot;type:integer;default:0&quot; json:&quot;position&quot;`&#10;&#9;CreatedAt   string `gorm:&quot;type:timestamp with time zone;default:now()&quot; json:&quot;created_at&quot;`&#10;&#9;UpdatedAt   string `gorm:&quot;type:timestamp with time zone;default:now()&quot; json:&quot;updated_at&quot;`&#10;}&#10;&#10;func (Ticket) TableName() string {&#10;&#9;return &quot;tickets&quot;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/migrations/000002_add_position_to_tickets.up.sql">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/migrations/000002_add_position_to_tickets.up.sql" />
              <option name="updatedContent" value="ALTER TABLE tickets ADD COLUMN position INTEGER DEFAULT 0;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/migrations/000003_add_ticket_no.down.sql">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/migrations/000003_add_ticket_no.down.sql" />
              <option name="updatedContent" value="ALTER TABLE tickets DROP COLUMN ticket_no;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/migrations/000003_add_ticket_no.up.sql">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/migrations/000003_add_ticket_no.up.sql" />
              <option name="updatedContent" value="ALTER TABLE tickets ADD COLUMN ticket_no TEXT UNIQUE NOT NULL DEFAULT '';&#10;&#10;-- Update existing tickets with generated ticket numbers&#10;DO $$&#10;DECLARE&#10;    ticket_record RECORD;&#10;    counter INTEGER := 1;&#10;BEGIN&#10;    FOR ticket_record IN &#10;        SELECT id FROM tickets ORDER BY created_at&#10;    LOOP&#10;        UPDATE tickets &#10;        SET ticket_no = 'TASK-' || LPAD(counter::TEXT, 4, '0')&#10;        WHERE id = ticket_record.id;&#10;        counter := counter + 1;&#10;    END LOOP;&#10;END $$;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/migrations/000004_add_missing_columns.down.sql">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/migrations/000004_add_missing_columns.down.sql" />
              <option name="updatedContent" value="-- Rollback missing columns&#10;&#10;-- Remove user_full_name from task_assignments table&#10;ALTER TABLE task_assignments DROP COLUMN IF EXISTS user_full_name;&#10;&#10;-- Remove position from tickets table  &#10;ALTER TABLE tickets DROP COLUMN IF EXISTS position;&#10;&#10;-- Remove ticket_no from tickets table&#10;ALTER TABLE tickets DROP COLUMN IF EXISTS ticket_no;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/migrations/000004_add_missing_columns.up.sql">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/migrations/000004_add_missing_columns.up.sql" />
              <option name="updatedContent" value="-- Add missing columns to existing tables&#10;&#10;-- Add user_full_name to task_assignments table&#10;ALTER TABLE task_assignments ADD COLUMN user_full_name TEXT NOT NULL DEFAULT '';&#10;&#10;-- Add position and ticket_no columns to tickets table (if not already added)&#10;DO $$ &#10;BEGIN&#10;    -- Add position column if it doesn't exist&#10;    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name = 'tickets' AND column_name = 'position') THEN&#10;        ALTER TABLE tickets ADD COLUMN position INTEGER DEFAULT 0;&#10;    END IF;&#10;    &#10;    -- Add ticket_no column if it doesn't exist&#10;    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name = 'tickets' AND column_name = 'ticket_no') THEN&#10;        ALTER TABLE tickets ADD COLUMN ticket_no TEXT UNIQUE NOT NULL DEFAULT '';&#10;        &#10;        -- Update existing tickets with generated ticket numbers&#10;        DECLARE&#10;            ticket_record RECORD;&#10;            counter INTEGER := 1;&#10;        BEGIN&#10;            FOR ticket_record IN &#10;                SELECT id FROM tickets ORDER BY created_at&#10;            LOOP&#10;                UPDATE tickets &#10;                SET ticket_no = 'TASK-' || LPAD(counter::TEXT, 4, '0')&#10;                WHERE id = ticket_record.id;&#10;                counter := counter + 1;&#10;            END LOOP;&#10;        END;&#10;    END IF;&#10;END $$;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/repository/column_repository.go">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/repository/column_repository.go" />
              <option name="originalContent" value="package repository&#10;&#10;import (&#10;&#9;&quot;github.com/tnqbao/gau-kanban-service/entity&quot;&#10;&#9;&quot;gorm.io/gorm&quot;&#10;)&#10;&#10;type ColumnRepository struct {&#10;&#9;db *gorm.DB&#10;}&#10;&#10;func NewColumnRepository(db *gorm.DB) ColumnRepositoryInterface {&#10;&#9;return &amp;ColumnRepository{db: db}&#10;}&#10;&#10;func (r *ColumnRepository) Create(column *entity.Column) error {&#10;&#9;return r.db.Create(column).Error&#10;}&#10;&#10;func (r *ColumnRepository) GetAll() ([]entity.Column, error) {&#10;&#9;var columns []entity.Column&#10;&#9;err := r.db.Order(&quot;position ASC&quot;).Find(&amp;columns).Error&#10;&#9;return columns, err&#10;}&#10;&#10;func (r *ColumnRepository) GetByID(id string) (*entity.Column, error) {&#10;&#9;var column entity.Column&#10;&#9;err := r.db.Where(&quot;id = ?&quot;, id).First(&amp;column).Error&#10;&#9;if err != nil {&#10;&#9;&#9;return nil, err&#10;&#9;}&#10;&#9;return &amp;column, nil&#10;}&#10;&#10;func (r *ColumnRepository) Update(column *entity.Column) error {&#10;&#9;return r.db.Save(column).Error&#10;}&#10;&#10;func (r *ColumnRepository) Delete(id string) error {&#10;&#9;return r.db.Delete(&amp;entity.Column{}, &quot;id = ?&quot;, id).Error&#10;}&#10;&#10;func (r *ColumnRepository) UpdatePosition(id string, position int) error {&#10;&#9;return r.db.Model(&amp;entity.Column{}).Where(&quot;id = ?&quot;, id).Update(&quot;position&quot;, position).Error&#10;}&#10;&#10;func (r *ColumnRepository) GetAllWithTickets() ([]ColumnWithTicketsDTO, error) {&#10;&#9;var columns []entity.Column&#10;&#9;var result []ColumnWithTicketsDTO&#10;&#10;&#9;// Lấy tất cả columns theo thứ tự position&#10;&#9;err := r.db.Order(&quot;position ASC&quot;).Find(&amp;columns).Error&#10;&#9;if err != nil {&#10;&#9;&#9;return nil, err&#10;&#9;}&#10;&#10;&#9;// Duyệt qua từng column và lấy tickets của nó&#10;&#9;for _, column := range columns {&#10;&#9;&#9;columnDTO := ColumnWithTicketsDTO{&#10;&#9;&#9;&#9;ID:      column.ID,&#10;&#9;&#9;&#9;Title:   column.Name,&#10;&#9;&#9;&#9;Order:   column.Position,&#10;&#9;&#9;&#9;Tickets: []TicketDTO{},&#10;&#9;&#9;}&#10;&#10;&#9;&#9;// Lấy tickets của column này&#10;&#9;&#9;var tickets []entity.Ticket&#10;&#9;&#9;err := r.db.Where(&quot;column_id = ?&quot;, column.ID).Order(&quot;created_at ASC&quot;).Find(&amp;tickets).Error&#10;&#9;&#9;if err != nil {&#10;&#9;&#9;&#9;return nil, err&#10;&#9;&#9;}&#10;&#10;&#9;&#9;// Convert tickets thành TicketDTO&#10;&#9;&#9;for _, ticket := range tickets {&#10;&#9;&#9;&#9;// Lấy labels của ticket&#10;&#9;&#9;&#9;var labels []string&#10;&#9;&#9;&#9;err := r.db.Table(&quot;labels&quot;).&#10;&#9;&#9;&#9;&#9;Select(&quot;labels.name&quot;).&#10;&#9;&#9;&#9;&#9;Joins(&quot;JOIN ticket_labels ON labels.id = ticket_labels.label_id&quot;).&#10;&#9;&#9;&#9;&#9;Where(&quot;ticket_labels.ticket_id = ?&quot;, ticket.ID).&#10;&#9;&#9;&#9;&#9;Pluck(&quot;name&quot;, &amp;labels).Error&#10;&#9;&#9;&#9;if err != nil {&#10;&#9;&#9;&#9;&#9;labels = []string{} // Nếu có lỗi thì để array rỗng&#10;&#9;&#9;&#9;}&#10;&#10;&#9;&#9;&#9;// Lấy assignees của ticket&#10;&#9;&#9;&#9;var assignees []string&#10;&#9;&#9;&#9;err = r.db.Table(&quot;task_assignments&quot;).&#10;&#9;&#9;&#9;&#9;Select(&quot;user_id&quot;).&#10;&#9;&#9;&#9;&#9;Where(&quot;ticket_id = ?&quot;, ticket.ID).&#10;&#9;&#9;&#9;&#9;Pluck(&quot;user_id&quot;, &amp;assignees).Error&#10;&#9;&#9;&#9;if err != nil {&#10;&#9;&#9;&#9;&#9;assignees = []string{} // Nếu có lỗi thì để array rỗng&#10;&#9;&#9;&#9;}&#10;&#10;&#9;&#9;&#9;// Xác định completed dựa trên column name (có thể customize logic này)&#10;&#9;&#9;&#9;completed := column.Name == &quot;DONE&quot; || column.Name == &quot;COMPLETED&quot;&#10;&#10;&#9;&#9;&#9;ticketDTO := TicketDTO{&#10;&#9;&#9;&#9;&#9;ID:          ticket.ID,&#10;&#9;&#9;&#9;&#9;Title:       ticket.Title,&#10;&#9;&#9;&#9;&#9;Description: ticket.Description,&#10;&#9;&#9;&#9;&#9;TicketID:    ticket.ID, // Sử dụng ID làm ticket_id&#10;&#9;&#9;&#9;&#9;Labels:      labels,    // Sử dụng Labels thay vì Tags&#10;&#9;&#9;&#9;&#9;Assignees:   assignees,&#10;&#9;&#9;&#9;&#9;Completed:   completed,&#10;&#9;&#9;&#9;&#9;DueDate:     ticket.DueDate,&#10;&#9;&#9;&#9;&#9;Priority:    ticket.Priority,&#10;&#9;&#9;&#9;&#9;CreatedAt:   ticket.CreatedAt,&#10;&#9;&#9;&#9;&#9;UpdatedAt:   ticket.UpdatedAt,&#10;&#9;&#9;&#9;}&#10;&#10;&#9;&#9;&#9;columnDTO.Tickets = append(columnDTO.Tickets, ticketDTO)&#10;&#9;&#9;}&#10;&#10;&#9;&#9;result = append(result, columnDTO)&#10;&#9;}&#10;&#10;&#9;return result, nil&#10;}&#10;" />
              <option name="updatedContent" value="package repository&#10;&#10;import (&#10;&#9;&quot;github.com/tnqbao/gau-kanban-service/entity&quot;&#10;&#9;&quot;gorm.io/gorm&quot;&#10;)&#10;&#10;type ColumnRepository struct {&#10;&#9;db *gorm.DB&#10;}&#10;&#10;func NewColumnRepository(db *gorm.DB) ColumnRepositoryInterface {&#10;&#9;return &amp;ColumnRepository{db: db}&#10;}&#10;&#10;func (r *ColumnRepository) Create(column *entity.Column) error {&#10;&#9;return r.db.Create(column).Error&#10;}&#10;&#10;func (r *ColumnRepository) GetAll() ([]entity.Column, error) {&#10;&#9;var columns []entity.Column&#10;&#9;err := r.db.Order(&quot;position ASC&quot;).Find(&amp;columns).Error&#10;&#9;return columns, err&#10;}&#10;&#10;func (r *ColumnRepository) GetByID(id string) (*entity.Column, error) {&#10;&#9;var column entity.Column&#10;&#9;err := r.db.Where(&quot;id = ?&quot;, id).First(&amp;column).Error&#10;&#9;if err != nil {&#10;&#9;&#9;return nil, err&#10;&#9;}&#10;&#9;return &amp;column, nil&#10;}&#10;&#10;func (r *ColumnRepository) Update(column *entity.Column) error {&#10;&#9;return r.db.Save(column).Error&#10;}&#10;&#10;func (r *ColumnRepository) Delete(id string) error {&#10;&#9;return r.db.Delete(&amp;entity.Column{}, &quot;id = ?&quot;, id).Error&#10;}&#10;&#10;func (r *ColumnRepository) UpdatePosition(id string, position int) error {&#10;&#9;return r.db.Model(&amp;entity.Column{}).Where(&quot;id = ?&quot;, id).Update(&quot;position&quot;, position).Error&#10;}&#10;&#10;func (r *ColumnRepository) GetAllWithTickets() ([]ColumnWithTicketsDTO, error) {&#10;&#9;var columns []entity.Column&#10;&#9;var result []ColumnWithTicketsDTO&#10;&#10;&#9;// Lấy tất cả columns theo thứ tự position&#10;&#9;err := r.db.Order(&quot;position ASC&quot;).Find(&amp;columns).Error&#10;&#9;if err != nil {&#10;&#9;&#9;return nil, err&#10;&#9;}&#10;&#10;&#9;// Duyệt qua từng column và lấy tickets của nó&#10;&#9;for _, column := range columns {&#10;&#9;&#9;columnDTO := ColumnWithTicketsDTO{&#10;&#9;&#9;&#9;ID:      column.ID,&#10;&#9;&#9;&#9;Title:   column.Name,&#10;&#9;&#9;&#9;Order:   column.Position,&#10;&#9;&#9;&#9;Tickets: []TicketDTO{},&#10;&#9;&#9;}&#10;&#10;&#9;&#9;// Lấy tickets của column này&#10;&#9;&#9;var tickets []entity.Ticket&#10;&#9;&#9;err := r.db.Where(&quot;column_id = ?&quot;, column.ID).Order(&quot;created_at ASC&quot;).Find(&amp;tickets).Error&#10;&#9;&#9;if err != nil {&#10;&#9;&#9;&#9;return nil, err&#10;&#9;&#9;}&#10;&#10;&#9;&#9;// Convert tickets thành TicketDTO với thông tin cơ bản&#10;&#9;&#9;for _, ticket := range tickets {&#10;&#9;&#9;&#9;// Lấy labels của ticket&#10;&#9;&#9;&#9;var labels []LabelDTO&#10;&#9;&#9;&#9;err := r.db.Table(&quot;labels&quot;).&#10;&#9;&#9;&#9;&#9;Select(&quot;labels.id, labels.name, labels.color&quot;).&#10;&#9;&#9;&#9;&#9;Joins(&quot;JOIN ticket_labels ON labels.id = ticket_labels.label_id&quot;).&#10;&#9;&#9;&#9;&#9;Where(&quot;ticket_labels.ticket_id = ?&quot;, ticket.ID).&#10;&#9;&#9;&#9;&#9;Scan(&amp;labels).Error&#10;&#9;&#9;&#9;if err != nil {&#10;&#9;&#9;&#9;&#9;labels = []LabelDTO{} // Nếu có lỗi thì để array rỗng&#10;&#9;&#9;&#9;}&#10;&#10;&#9;&#9;&#9;// Lấy assignees của ticket&#10;&#9;&#9;&#9;var assignees []AssigneeDTO&#10;&#9;&#9;&#9;err = r.db.Table(&quot;task_assignments&quot;).&#10;&#9;&#9;&#9;&#9;Select(&quot;task_assignments.id, task_assignments.user_id, task_assignments.user_full_name as user_full_name, task_assignments.assigned_at&quot;).&#10;&#9;&#9;&#9;&#9;Where(&quot;ticket_id = ?&quot;, ticket.ID).&#10;&#9;&#9;&#9;&#9;Scan(&amp;assignees).Error&#10;&#9;&#9;&#9;if err != nil {&#10;&#9;&#9;&#9;&#9;assignees = []AssigneeDTO{} // Nếu có lỗi thì để array rỗng&#10;&#9;&#9;&#9;}&#10;&#10;&#9;&#9;&#9;// Xác định completed dựa trên column name&#10;&#9;&#9;&#9;completed := column.Name == &quot;DONE&quot; || column.Name == &quot;COMPLETED&quot;&#10;&#10;&#9;&#9;&#9;ticketDTO := TicketDTO{&#10;&#9;&#9;&#9;&#9;ID:          ticket.ID,&#10;&#9;&#9;&#9;&#9;Title:       ticket.Title,&#10;&#9;&#9;&#9;&#9;Description: ticket.Description,&#10;&#9;&#9;&#9;&#9;TicketID:    ticket.ID,&#10;&#9;&#9;&#9;&#9;Labels:      labels,&#10;&#9;&#9;&#9;&#9;Assignees:   assignees,&#10;&#9;&#9;&#9;&#9;Comments:    []CommentDTO{}, // Comments rỗng cho performance&#10;&#9;&#9;&#9;&#9;Completed:   completed,&#10;&#9;&#9;&#9;&#9;DueDate:     ticket.DueDate,&#10;&#9;&#9;&#9;&#9;Priority:    ticket.Priority,&#10;&#9;&#9;&#9;&#9;CreatedAt:   ticket.CreatedAt,&#10;&#9;&#9;&#9;&#9;UpdatedAt:   ticket.UpdatedAt,&#10;&#9;&#9;&#9;}&#10;&#10;&#9;&#9;&#9;columnDTO.Tickets = append(columnDTO.Tickets, ticketDTO)&#10;&#9;&#9;}&#10;&#10;&#9;&#9;result = append(result, columnDTO)&#10;&#9;}&#10;&#10;&#9;return result, nil&#10;}&#10;&#10;func (r *ColumnRepository) GetAllWithFullTicketDetails() ([]ColumnWithTicketsDTO, error) {&#10;&#9;var columns []entity.Column&#10;&#9;var result []ColumnWithTicketsDTO&#10;&#10;&#9;// Lấy tất cả columns theo thứ tự position&#10;&#9;err := r.db.Order(&quot;position ASC&quot;).Find(&amp;columns).Error&#10;&#9;if err != nil {&#10;&#9;&#9;return nil, err&#10;&#9;}&#10;&#10;&#9;// Duyệt qua từng column và lấy tickets với đầy đủ thông tin&#10;&#9;for _, column := range columns {&#10;&#9;&#9;columnDTO := ColumnWithTicketsDTO{&#10;&#9;&#9;&#9;ID:      column.ID,&#10;&#9;&#9;&#9;Title:   column.Name,&#10;&#9;&#9;&#9;Order:   column.Position,&#10;&#9;&#9;&#9;Tickets: []TicketDTO{},&#10;&#9;&#9;}&#10;&#10;&#9;&#9;// Lấy tickets của column này&#10;&#9;&#9;var tickets []entity.Ticket&#10;&#9;&#9;err := r.db.Where(&quot;column_id = ?&quot;, column.ID).Order(&quot;created_at ASC&quot;).Find(&amp;tickets).Error&#10;&#9;&#9;if err != nil {&#10;&#9;&#9;&#9;return nil, err&#10;&#9;&#9;}&#10;&#10;&#9;&#9;// Convert tickets thành TicketDTO với đầy đủ thông tin&#10;&#9;&#9;for _, ticket := range tickets {&#10;&#9;&#9;&#9;// Lấy labels chi tiết&#10;&#9;&#9;&#9;var labels []LabelDTO&#10;&#9;&#9;&#9;err := r.db.Table(&quot;labels&quot;).&#10;&#9;&#9;&#9;&#9;Select(&quot;labels.id, labels.name, labels.color&quot;).&#10;&#9;&#9;&#9;&#9;Joins(&quot;JOIN ticket_labels ON labels.id = ticket_labels.label_id&quot;).&#10;&#9;&#9;&#9;&#9;Where(&quot;ticket_labels.ticket_id = ?&quot;, ticket.ID).&#10;&#9;&#9;&#9;&#9;Scan(&amp;labels).Error&#10;&#9;&#9;&#9;if err != nil {&#10;&#9;&#9;&#9;&#9;labels = []LabelDTO{}&#10;&#9;&#9;&#9;}&#10;&#10;&#9;&#9;&#9;// Lấy assignees chi tiết&#10;&#9;&#9;&#9;var assignees []AssigneeDTO&#10;&#9;&#9;&#9;err = r.db.Table(&quot;task_assignments&quot;).&#10;&#9;&#9;&#9;&#9;Select(&quot;task_assignments.id, task_assignments.user_id, task_assignments.user_full_name as user_full_name, task_assignments.assigned_at&quot;).&#10;&#9;&#9;&#9;&#9;Where(&quot;ticket_id = ?&quot;, ticket.ID).&#10;&#9;&#9;&#9;&#9;Scan(&amp;assignees).Error&#10;&#9;&#9;&#9;if err != nil {&#10;&#9;&#9;&#9;&#9;assignees = []AssigneeDTO{}&#10;&#9;&#9;&#9;}&#10;&#10;&#9;&#9;&#9;// Lấy comments chi tiết&#10;&#9;&#9;&#9;var comments []CommentDTO&#10;&#9;&#9;&#9;err = r.db.Table(&quot;ticket_comments&quot;).&#10;&#9;&#9;&#9;&#9;Select(&quot;id, user_id, content, created_at&quot;).&#10;&#9;&#9;&#9;&#9;Where(&quot;ticket_id = ?&quot;, ticket.ID).&#10;&#9;&#9;&#9;&#9;Order(&quot;created_at ASC&quot;).&#10;&#9;&#9;&#9;&#9;Scan(&amp;comments).Error&#10;&#9;&#9;&#9;if err != nil {&#10;&#9;&#9;&#9;&#9;comments = []CommentDTO{}&#10;&#9;&#9;&#9;}&#10;&#10;&#9;&#9;&#9;// Xác định completed&#10;&#9;&#9;&#9;completed := column.Name == &quot;DONE&quot; || column.Name == &quot;COMPLETED&quot;&#10;&#10;&#9;&#9;&#9;ticketDTO := TicketDTO{&#10;&#9;&#9;&#9;&#9;ID:          ticket.ID,&#10;&#9;&#9;&#9;&#9;Title:       ticket.Title,&#10;&#9;&#9;&#9;&#9;Description: ticket.Description,&#10;&#9;&#9;&#9;&#9;TicketID:    ticket.ID,&#10;&#9;&#9;&#9;&#9;Labels:      labels,&#10;&#9;&#9;&#9;&#9;Assignees:   assignees,&#10;&#9;&#9;&#9;&#9;Comments:    comments,&#10;&#9;&#9;&#9;&#9;Completed:   completed,&#10;&#9;&#9;&#9;&#9;DueDate:     ticket.DueDate,&#10;&#9;&#9;&#9;&#9;Priority:    ticket.Priority,&#10;&#9;&#9;&#9;&#9;CreatedAt:   ticket.CreatedAt,&#10;&#9;&#9;&#9;&#9;UpdatedAt:   ticket.UpdatedAt,&#10;&#9;&#9;&#9;}&#10;&#10;&#9;&#9;&#9;columnDTO.Tickets = append(columnDTO.Tickets, ticketDTO)&#10;&#9;&#9;}&#10;&#10;&#9;&#9;result = append(result, columnDTO)&#10;&#9;}&#10;&#10;&#9;return result, nil&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/repository/interfaces.go">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/repository/interfaces.go" />
              <option name="originalContent" value="package repository&#10;&#10;import (&#10;&#9;&quot;github.com/tnqbao/gau-kanban-service/entity&quot;&#10;)&#10;&#10;// ColumnRepositoryInterface defines methods for column operations&#10;type ColumnRepositoryInterface interface {&#10;&#9;Create(column *entity.Column) error&#10;&#9;GetAll() ([]entity.Column, error)&#10;&#9;GetByID(id string) (*entity.Column, error)&#10;&#9;Update(column *entity.Column) error&#10;&#9;Delete(id string) error&#10;&#9;UpdatePosition(id string, position int) error&#10;&#9;GetAllWithTickets() ([]ColumnWithTicketsDTO, error)&#10;}&#10;&#10;// TicketRepositoryInterface defines methods for ticket operations&#10;type TicketRepositoryInterface interface {&#10;&#9;Create(ticket *entity.Ticket) error&#10;&#9;GetAll() ([]entity.Ticket, error)&#10;&#9;GetByID(id string) (*entity.Ticket, error)&#10;&#9;GetByColumnID(columnID string) ([]entity.Ticket, error)&#10;&#9;Update(ticket *entity.Ticket) error&#10;&#9;Delete(id string) error&#10;&#9;MoveToColumn(ticketID, columnID string) error&#10;&#9;GetWithAssignments(ticketID string) (*entity.Ticket, []entity.TaskAssignment, error)&#10;&#9;GetWithLabels(ticketID string) (*entity.Ticket, []entity.Label, error)&#10;&#9;Search(query string) ([]entity.Ticket, error)&#10;}&#10;&#10;// LabelRepositoryInterface defines methods for label operations&#10;type LabelRepositoryInterface interface {&#10;&#9;Create(label *entity.Label) error&#10;&#9;GetAll() ([]entity.Label, error)&#10;&#9;GetByID(id string) (*entity.Label, error)&#10;&#9;Update(label *entity.Label) error&#10;&#9;Delete(id string) error&#10;&#9;GetByTicketID(ticketID string) ([]entity.Label, error)&#10;}&#10;&#10;// TaskAssignmentRepositoryInterface defines methods for task assignment operations&#10;type TaskAssignmentRepositoryInterface interface {&#10;&#9;Create(assignment *entity.TaskAssignment) error&#10;&#9;GetAll() ([]entity.TaskAssignment, error)&#10;&#9;GetByID(id string) (*entity.TaskAssignment, error)&#10;&#9;GetByTicketID(ticketID string) ([]entity.TaskAssignment, error)&#10;&#9;GetByUserID(userID string) ([]entity.TaskAssignment, error)&#10;&#9;Update(assignment *entity.TaskAssignment) error&#10;&#9;Delete(id string) error&#10;&#9;DeleteByTicketAndUser(ticketID, userID string) error&#10;}&#10;&#10;// TicketCommentRepositoryInterface defines methods for ticket comment operations&#10;type TicketCommentRepositoryInterface interface {&#10;&#9;Create(comment *entity.TicketComment) error&#10;&#9;GetAll() ([]entity.TicketComment, error)&#10;&#9;GetByID(id string) (*entity.TicketComment, error)&#10;&#9;GetByTicketID(ticketID string) ([]entity.TicketComment, error)&#10;&#9;GetByUserID(userID string) ([]entity.TicketComment, error)&#10;&#9;Update(comment *entity.TicketComment) error&#10;&#9;Delete(id string) error&#10;}&#10;&#10;// TicketLabelRepositoryInterface defines methods for ticket-label relationship operations&#10;type TicketLabelRepositoryInterface interface {&#10;&#9;AddLabelToTicket(ticketID, labelID string) error&#10;&#9;RemoveLabelFromTicket(ticketID, labelID string) error&#10;&#9;GetTicketsByLabelID(labelID string) ([]entity.Ticket, error)&#10;&#9;GetLabelsByTicketID(ticketID string) ([]entity.Label, error)&#10;&#9;RemoveAllLabelsFromTicket(ticketID string) error&#10;}&#10;" />
              <option name="updatedContent" value="package repository&#10;&#10;import (&#10;&#9;&quot;github.com/tnqbao/gau-kanban-service/entity&quot;&#10;)&#10;&#10;// ColumnRepositoryInterface defines methods for column operations&#10;type ColumnRepositoryInterface interface {&#10;&#9;Create(column *entity.Column) error&#10;&#9;GetAll() ([]entity.Column, error)&#10;&#9;GetByID(id string) (*entity.Column, error)&#10;&#9;Update(column *entity.Column) error&#10;&#9;Delete(id string) error&#10;&#9;UpdatePosition(id string, position int) error&#10;&#9;GetAllWithTickets() ([]ColumnWithTicketsDTO, error)&#10;&#9;GetAllWithFullTicketDetails() ([]ColumnWithTicketsDTO, error)&#10;}&#10;&#10;// TicketRepositoryInterface defines methods for ticket operations&#10;type TicketRepositoryInterface interface {&#10;&#9;Create(ticket *entity.Ticket) error&#10;&#9;GetAll() ([]entity.Ticket, error)&#10;&#9;GetByID(id string) (*entity.Ticket, error)&#10;&#9;GetByColumnID(columnID string) ([]entity.Ticket, error)&#10;&#9;Update(ticket *entity.Ticket) error&#10;&#9;Delete(id string) error&#10;&#9;MoveToColumn(ticketID, columnID string) error&#10;&#9;GetWithAssignments(ticketID string) (*entity.Ticket, []entity.TaskAssignment, error)&#10;&#9;GetWithLabels(ticketID string) (*entity.Ticket, []entity.Label, error)&#10;&#9;Search(query string) ([]entity.Ticket, error)&#10;&#9;GetTicketDetail(ticketID string) (*TicketDetailDTO, error)&#10;&#9;GetTicketWithAllRelations(ticketID string) (*TicketDTO, error)&#10;}&#10;&#10;// LabelRepositoryInterface defines methods for label operations&#10;type LabelRepositoryInterface interface {&#10;&#9;Create(label *entity.Label) error&#10;&#9;GetAll() ([]entity.Label, error)&#10;&#9;GetByID(id string) (*entity.Label, error)&#10;&#9;Update(label *entity.Label) error&#10;&#9;Delete(id string) error&#10;&#9;GetByTicketID(ticketID string) ([]entity.Label, error)&#10;}&#10;&#10;// TaskAssignmentRepositoryInterface defines methods for task assignment operations&#10;type TaskAssignmentRepositoryInterface interface {&#10;&#9;Create(assignment *entity.TaskAssignment) error&#10;&#9;GetAll() ([]entity.TaskAssignment, error)&#10;&#9;GetByID(id string) (*entity.TaskAssignment, error)&#10;&#9;GetByTicketID(ticketID string) ([]entity.TaskAssignment, error)&#10;&#9;GetByUserID(userID string) ([]entity.TaskAssignment, error)&#10;&#9;Update(assignment *entity.TaskAssignment) error&#10;&#9;Delete(id string) error&#10;&#9;DeleteByTicketAndUser(ticketID, userID string) error&#10;}&#10;&#10;// TicketCommentRepositoryInterface defines methods for ticket comment operations&#10;type TicketCommentRepositoryInterface interface {&#10;&#9;Create(comment *entity.TicketComment) error&#10;&#9;GetAll() ([]entity.TicketComment, error)&#10;&#9;GetByID(id string) (*entity.TicketComment, error)&#10;&#9;GetByTicketID(ticketID string) ([]entity.TicketComment, error)&#10;&#9;GetByUserID(userID string) ([]entity.TicketComment, error)&#10;&#9;Update(comment *entity.TicketComment) error&#10;&#9;Delete(id string) error&#10;}&#10;&#10;// TicketLabelRepositoryInterface defines methods for ticket-label relationship operations&#10;type TicketLabelRepositoryInterface interface {&#10;&#9;AddLabelToTicket(ticketID, labelID string) error&#10;&#9;RemoveLabelFromTicket(ticketID, labelID string) error&#10;&#9;GetTicketsByLabelID(labelID string) ([]entity.Ticket, error)&#10;&#9;GetLabelsByTicketID(ticketID string) ([]entity.Label, error)&#10;&#9;RemoveAllLabelsFromTicket(ticketID string) error&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/repository/task_assignment.go">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/repository/task_assignment.go" />
              <option name="originalContent" value="package repository&#10;&#10;import (&#10;&#9;&quot;github.com/tnqbao/gau-kanban-service/entity&quot;&#10;)&#10;&#10;func (r *Repository) CreateAssignment(assignment *entity.TaskAssignment) error {&#10;&#9;return r.db.Create(assignment).Error&#10;}&#10;&#10;func (r *Repository) GetAllAssignment() ([]entity.TaskAssignment, error) {&#10;&#9;var assignments []entity.TaskAssignment&#10;&#9;err := r.db.Order(&quot;assigned_at DESC&quot;).Find(&amp;assignments).Error&#10;&#9;return assignments, err&#10;}&#10;&#10;func (r *Repository) GetAssignmentByID(id string) (*entity.TaskAssignment, error) {&#10;&#9;var assignment entity.TaskAssignment&#10;&#9;err := r.db.Where(&quot;id = ?&quot;, id).First(&amp;assignment).Error&#10;&#9;if err != nil {&#10;&#9;&#9;return nil, err&#10;&#9;}&#10;&#9;return &amp;assignment, nil&#10;}&#10;&#10;func (r *Repository) GetAssignmentByTicketID(ticketID string) ([]entity.TaskAssignment, error) {&#10;&#9;var assignments []entity.TaskAssignment&#10;&#9;err := r.db.Where(&quot;ticket_id = ?&quot;, ticketID).Order(&quot;assigned_at ASC&quot;).Find(&amp;assignments).Error&#10;&#9;return assignments, err&#10;}&#10;&#10;func (r *Repository) GetAssignmentsByTicketID(ticketID string) ([]entity.TaskAssignment, error) {&#10;&#9;return r.GetAssignmentByTicketID(ticketID)&#10;}&#10;&#10;func (r *Repository) GetAssignmentByUserID(userID string) ([]entity.TaskAssignment, error) {&#10;&#9;var assignments []entity.TaskAssignment&#10;&#9;err := r.db.Where(&quot;user_id = ?&quot;, userID).Order(&quot;assigned_at DESC&quot;).Find(&amp;assignments).Error&#10;&#9;return assignments, err&#10;}&#10;&#10;func (r *Repository) UpdateAssignment(assignment *entity.TaskAssignment) error {&#10;&#9;return r.db.Save(assignment).Error&#10;}&#10;&#10;func (r *Repository) DeleteAssignment(id string) error {&#10;&#9;return r.db.Delete(&amp;entity.TaskAssignment{}, &quot;id = ?&quot;, id).Error&#10;}&#10;&#10;func (r *Repository) DeleteAssignmentByTicketAndUser(ticketID, userID string) error {&#10;&#9;return r.db.Where(&quot;ticket_id = ? AND user_id = ?&quot;, ticketID, userID).Delete(&amp;entity.TaskAssignment{}).Error&#10;}&#10;" />
              <option name="updatedContent" value="package repository&#10;&#10;import (&#10;&#9;&quot;github.com/tnqbao/gau-kanban-service/entity&quot;&#10;)&#10;&#10;func (r *Repository) CreateAssignment(assignment *entity.TaskAssignment) error {&#10;&#9;return r.db.Create(assignment).Error&#10;}&#10;&#10;func (r *Repository) GetAllAssignment() ([]entity.TaskAssignment, error) {&#10;&#9;var assignments []entity.TaskAssignment&#10;&#9;err := r.db.Order(&quot;assigned_at DESC&quot;).Find(&amp;assignments).Error&#10;&#9;return assignments, err&#10;}&#10;&#10;func (r *Repository) GetAssignmentByID(id string) (*entity.TaskAssignment, error) {&#10;&#9;var assignment entity.TaskAssignment&#10;&#9;err := r.db.Where(&quot;id = ?&quot;, id).First(&amp;assignment).Error&#10;&#9;if err != nil {&#10;&#9;&#9;return nil, err&#10;&#9;}&#10;&#9;return &amp;assignment, nil&#10;}&#10;&#10;func (r *Repository) GetAssignmentByTicketID(ticketID string) ([]entity.TaskAssignment, error) {&#10;&#9;var assignments []entity.TaskAssignment&#10;&#9;err := r.db.Where(&quot;ticket_id = ?&quot;, ticketID).Order(&quot;assigned_at ASC&quot;).Find(&amp;assignments).Error&#10;&#9;return assignments, err&#10;}&#10;&#10;func (r *Repository) GetAssignmentsByTicketID(ticketID string) ([]entity.TaskAssignment, error) {&#10;&#9;return r.GetAssignmentByTicketID(ticketID)&#10;}&#10;&#10;func (r *Repository) GetAssignmentByUserID(userID string) ([]entity.TaskAssignment, error) {&#10;&#9;var assignments []entity.TaskAssignment&#10;&#9;err := r.db.Where(&quot;user_id = ?&quot;, userID).Order(&quot;assigned_at DESC&quot;).Find(&amp;assignments).Error&#10;&#9;return assignments, err&#10;}&#10;&#10;func (r *Repository) UpdateAssignment(assignment *entity.TaskAssignment) error {&#10;&#9;return r.db.Save(assignment).Error&#10;}&#10;&#10;func (r *Repository) DeleteAssignment(id string) error {&#10;&#9;return r.db.Delete(&amp;entity.TaskAssignment{}, &quot;id = ?&quot;, id).Error&#10;}&#10;&#10;func (r *Repository) DeleteAssignmentByTicketAndUser(ticketID, userID string) error {&#10;&#9;return r.db.Where(&quot;ticket_id = ? AND user_id = ?&quot;, ticketID, userID).Delete(&amp;entity.TaskAssignment{}).Error&#10;}&#10;&#10;func (r *Repository) DeleteAssignmentsByUserID(userID string) error {&#10;&#9;return r.db.Where(&quot;user_id = ?&quot;, userID).Delete(&amp;entity.TaskAssignment{}).Error&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/repository/ticket.go">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/repository/ticket.go" />
              <option name="originalContent" value="package repository&#10;&#10;import (&#10;&#9;&quot;fmt&quot;&#10;&#9;&quot;github.com/tnqbao/gau-kanban-service/entity&quot;&#10;)&#10;&#10;func (r *Repository) generateTicketNumber() (string, error) {&#10;&#9;var count int64&#10;&#9;err := r.db.Model(&amp;entity.Ticket{}).Count(&amp;count).Error&#10;&#9;if err != nil {&#10;&#9;&#9;return &quot;&quot;, err&#10;&#9;}&#10;&#9;return fmt.Sprintf(&quot;TASK-%04d&quot;, count+1), nil&#10;}&#10;&#10;func (r *Repository) CreateTicket(ticket *entity.Ticket) error {&#10;&#9;// Generate ticket number nếu chưa có&#10;&#9;if ticket.TicketNo == &quot;&quot; {&#10;&#9;&#9;ticketNo, err := r.generateTicketNumber()&#10;&#9;&#9;if err != nil {&#10;&#9;&#9;&#9;return err&#10;&#9;&#9;}&#10;&#9;&#9;ticket.TicketNo = ticketNo&#10;&#9;}&#10;&#9;return r.db.Create(ticket).Error&#10;}&#10;&#10;func (r *Repository) GetAllTicket() ([]entity.Ticket, error) {&#10;&#9;var tickets []entity.Ticket&#10;&#9;err := r.db.Order(&quot;created_at DESC&quot;).Find(&amp;tickets).Error&#10;&#9;return tickets, err&#10;}&#10;&#10;func (r *Repository) GetTicketByID(id string) (*entity.Ticket, error) {&#10;&#9;var ticket entity.Ticket&#10;&#9;err := r.db.Where(&quot;id = ?&quot;, id).First(&amp;ticket).Error&#10;&#9;if err != nil {&#10;&#9;&#9;return nil, err&#10;&#9;}&#10;&#9;return &amp;ticket, nil&#10;}&#10;&#10;func (r *Repository) GetTicketByColumnID(columnID string) ([]entity.Ticket, error) {&#10;&#9;var tickets []entity.Ticket&#10;&#9;err := r.db.Where(&quot;column_id = ?&quot;, columnID).Order(&quot;position ASC, created_at ASC&quot;).Find(&amp;tickets).Error&#10;&#9;return tickets, err&#10;}&#10;&#10;func (r *Repository) UpdateTicket(ticket *entity.Ticket) error {&#10;&#9;return r.db.Save(ticket).Error&#10;}&#10;&#10;func (r *Repository) DeleteTicket(id string) error {&#10;&#9;return r.db.Delete(&amp;entity.Ticket{}, &quot;id = ?&quot;, id).Error&#10;}&#10;&#10;func (r *Repository) MoveTicketToColumn(ticketID, columnID string) error {&#10;&#9;return r.db.Model(&amp;entity.Ticket{}).Where(&quot;id = ?&quot;, ticketID).Update(&quot;column_id&quot;, columnID).Error&#10;}&#10;&#10;// MoveTicketToColumnWithPosition di chuyển ticket sang column khác với position cụ thể&#10;func (r *Repository) MoveTicketToColumnWithPosition(ticketID, newColumnID string, newPosition int) error {&#10;&#9;// Lấy thông tin ticket hiện tại&#10;&#9;ticket, err := r.GetTicketByID(ticketID)&#10;&#9;if err != nil {&#10;&#9;&#9;return err&#10;&#9;}&#10;&#10;&#9;oldColumnID := ticket.ColumnID&#10;&#9;oldPosition := ticket.Position&#10;&#10;&#9;// Bắt đầu transaction&#10;&#9;tx := r.db.Begin()&#10;&#9;if tx.Error != nil {&#10;&#9;&#9;return tx.Error&#10;&#9;}&#10;&#9;defer func() {&#10;&#9;&#9;if r := recover(); r != nil {&#10;&#9;&#9;&#9;tx.Rollback()&#10;&#9;&#9;}&#10;&#9;}()&#10;&#10;&#9;if oldColumnID == newColumnID {&#10;&#9;&#9;// Nếu di chuyển trong cùng column, dùng logic UpdateTicketPosition&#10;&#9;&#9;if newPosition &lt; oldPosition {&#10;&#9;&#9;&#9;err = tx.Model(&amp;entity.Ticket{}).&#10;&#9;&#9;&#9;&#9;Where(&quot;column_id = ? AND position &gt;= ? AND position &lt; ? AND id != ?&quot;,&#10;&#9;&#9;&#9;&#9;&#9;newColumnID, newPosition, oldPosition, ticketID).&#10;&#9;&#9;&#9;&#9;Update(&quot;position&quot;, tx.Raw(&quot;position + 1&quot;)).Error&#10;&#9;&#9;} else if newPosition &gt; oldPosition {&#10;&#9;&#9;&#9;err = tx.Model(&amp;entity.Ticket{}).&#10;&#9;&#9;&#9;&#9;Where(&quot;column_id = ? AND position &gt; ? AND position &lt;= ? AND id != ?&quot;,&#10;&#9;&#9;&#9;&#9;&#9;newColumnID, oldPosition, newPosition, ticketID).&#10;&#9;&#9;&#9;&#9;Update(&quot;position&quot;, tx.Raw(&quot;position - 1&quot;)).Error&#10;&#9;&#9;}&#10;&#9;} else {&#10;&#9;&#9;// Di chuyển giữa các column khác nhau&#10;&#10;&#9;&#9;// 1. Cập nhật position trong column cũ (đóng khoảng trống)&#10;&#9;&#9;err = tx.Model(&amp;entity.Ticket{}).&#10;&#9;&#9;&#9;Where(&quot;column_id = ? AND position &gt; ?&quot;, oldColumnID, oldPosition).&#10;&#9;&#9;&#9;Update(&quot;position&quot;, tx.Raw(&quot;position - 1&quot;)).Error&#10;&#9;&#9;if err != nil {&#10;&#9;&#9;&#9;tx.Rollback()&#10;&#9;&#9;&#9;return err&#10;&#9;&#9;}&#10;&#10;&#9;&#9;// 2. Cập nhật position trong column mới (tạo chỗ trống)&#10;&#9;&#9;err = tx.Model(&amp;entity.Ticket{}).&#10;&#9;&#9;&#9;Where(&quot;column_id = ? AND position &gt;= ?&quot;, newColumnID, newPosition).&#10;&#9;&#9;&#9;Update(&quot;position&quot;, tx.Raw(&quot;position + 1&quot;)).Error&#10;&#9;&#9;if err != nil {&#10;&#9;&#9;&#9;tx.Rollback()&#10;&#9;&#9;&#9;return err&#10;&#9;&#9;}&#10;&#9;}&#10;&#10;&#9;if err != nil {&#10;&#9;&#9;tx.Rollback()&#10;&#9;&#9;return err&#10;&#9;}&#10;&#10;&#9;// 3. Cập nhật ticket với column và position mới&#10;&#9;err = tx.Model(&amp;entity.Ticket{}).&#10;&#9;&#9;Where(&quot;id = ?&quot;, ticketID).&#10;&#9;&#9;Updates(map[string]interface{}{&#10;&#9;&#9;&#9;&quot;column_id&quot;: newColumnID,&#10;&#9;&#9;&#9;&quot;position&quot;:  newPosition,&#10;&#9;&#9;}).Error&#10;&#9;if err != nil {&#10;&#9;&#9;tx.Rollback()&#10;&#9;&#9;return err&#10;&#9;}&#10;&#10;&#9;return tx.Commit().Error&#10;}&#10;&#10;func (r *Repository) UpdateTicketPosition(ticketID string, newPosition int) error {&#10;&#9;// Lấy thông tin ticket hiện tại&#10;&#9;ticket, err := r.GetTicketByID(ticketID)&#10;&#9;if err != nil {&#10;&#9;&#9;return err&#10;&#9;}&#10;&#10;&#9;oldPosition := ticket.Position&#10;&#9;columnID := ticket.ColumnID&#10;&#10;&#9;// Bắt đầu transaction&#10;&#9;tx := r.db.Begin()&#10;&#9;if tx.Error != nil {&#10;&#9;&#9;return tx.Error&#10;&#9;}&#10;&#9;defer func() {&#10;&#9;&#9;if r := recover(); r != nil {&#10;&#9;&#9;&#9;tx.Rollback()&#10;&#9;&#9;}&#10;&#9;}()&#10;&#10;&#9;// Nếu di chuyển lên (newPosition &lt; oldPosition)&#10;&#9;if newPosition &lt; oldPosition {&#10;&#9;&#9;// Các tickets có position từ newPosition đến oldPosition-1 sẽ tăng position lên 1&#10;&#9;&#9;err = tx.Model(&amp;entity.Ticket{}).&#10;&#9;&#9;&#9;Where(&quot;column_id = ? AND position &gt;= ? AND position &lt; ? AND id != ?&quot;,&#10;&#9;&#9;&#9;&#9;columnID, newPosition, oldPosition, ticketID).&#10;&#9;&#9;&#9;Update(&quot;position&quot;, tx.Raw(&quot;position + 1&quot;)).Error&#10;&#9;&#9;if err != nil {&#10;&#9;&#9;&#9;tx.Rollback()&#10;&#9;&#9;&#9;return err&#10;&#9;&#9;}&#10;&#9;} else if newPosition &gt; oldPosition {&#10;&#9;&#9;// Nếu di chuyển xuống (newPosition &gt; oldPosition)&#10;&#9;&#9;// Các tickets có position từ oldPosition+1 đến newPosition sẽ giảm position xuống 1&#10;&#9;&#9;err = tx.Model(&amp;entity.Ticket{}).&#10;&#9;&#9;&#9;Where(&quot;column_id = ? AND position &gt; ? AND position &lt;= ? AND id != ?&quot;,&#10;&#9;&#9;&#9;&#9;columnID, oldPosition, newPosition, ticketID).&#10;&#9;&#9;&#9;Update(&quot;position&quot;, tx.Raw(&quot;position - 1&quot;)).Error&#10;&#9;&#9;if err != nil {&#10;&#9;&#9;&#9;tx.Rollback()&#10;&#9;&#9;&#9;return err&#10;&#9;&#9;}&#10;&#9;}&#10;&#10;&#9;// Cập nhật position của ticket được di chuyển&#10;&#9;err = tx.Model(&amp;entity.Ticket{}).&#10;&#9;&#9;Where(&quot;id = ?&quot;, ticketID).&#10;&#9;&#9;Update(&quot;position&quot;, newPosition).Error&#10;&#9;if err != nil {&#10;&#9;&#9;tx.Rollback()&#10;&#9;&#9;return err&#10;&#9;}&#10;&#10;&#9;return tx.Commit().Error&#10;}&#10;&#10;func (r *Repository) GetTicketWithAssignments(ticketID string) (*entity.Ticket, []entity.TaskAssignment, error) {&#10;&#9;var ticket entity.Ticket&#10;&#9;var assignments []entity.TaskAssignment&#10;&#10;&#9;err := r.db.Where(&quot;id = ?&quot;, ticketID).First(&amp;ticket).Error&#10;&#9;if err != nil {&#10;&#9;&#9;return nil, nil, err&#10;&#9;}&#10;&#10;&#9;err = r.db.Where(&quot;ticket_id = ?&quot;, ticketID).Find(&amp;assignments).Error&#10;&#9;if err != nil {&#10;&#9;&#9;return &amp;ticket, nil, err&#10;&#9;}&#10;&#10;&#9;return &amp;ticket, assignments, nil&#10;}&#10;&#10;func (r *Repository) GetTicketWithLabels(ticketID string) (*entity.Ticket, []entity.Label, error) {&#10;&#9;var ticket entity.Ticket&#10;&#9;var labels []entity.Label&#10;&#10;&#9;err := r.db.Where(&quot;id = ?&quot;, ticketID).First(&amp;ticket).Error&#10;&#9;if err != nil {&#10;&#9;&#9;return nil, nil, err&#10;&#9;}&#10;&#10;&#9;err = r.db.Table(&quot;labels&quot;).&#10;&#9;&#9;Joins(&quot;JOIN ticket_labels ON labels.id = ticket_labels.label_id&quot;).&#10;&#9;&#9;Where(&quot;ticket_labels.ticket_id = ?&quot;, ticketID).&#10;&#9;&#9;Find(&amp;labels).Error&#10;&#10;&#9;if err != nil {&#10;&#9;&#9;return &amp;ticket, nil, err&#10;&#9;}&#10;&#10;&#9;return &amp;ticket, labels, nil&#10;}&#10;&#10;func (r *Repository) SearchTicket(query string) ([]entity.Ticket, error) {&#10;&#9;var tickets []entity.Ticket&#10;&#9;searchPattern := &quot;%&quot; + query + &quot;%&quot;&#10;&#9;err := r.db.Where(&quot;title ILIKE ? OR description ILIKE ?&quot;, searchPattern, searchPattern).&#10;&#9;&#9;Order(&quot;created_at DESC&quot;).Find(&amp;tickets).Error&#10;&#9;return tickets, err&#10;}&#10;&#10;func (r *Repository) GetTicketDetail(ticketID string) (*TicketDetailDTO, error) {&#10;&#9;var ticket entity.Ticket&#10;&#9;var column entity.Column&#10;&#10;&#9;// Lấy thông tin ticket&#10;&#9;err := r.db.Where(&quot;id = ?&quot;, ticketID).First(&amp;ticket).Error&#10;&#9;if err != nil {&#10;&#9;&#9;return nil, err&#10;&#9;}&#10;&#10;&#9;// Lấy thông tin column&#10;&#9;err = r.db.Where(&quot;id = ?&quot;, ticket.ColumnID).First(&amp;column).Error&#10;&#9;if err != nil {&#10;&#9;&#9;return nil, err&#10;&#9;}&#10;&#10;&#9;// Lấy labels chi tiết&#10;&#9;var labels []LabelDTO&#10;&#9;err = r.db.Table(&quot;labels&quot;).&#10;&#9;&#9;Select(&quot;labels.id, labels.name, labels.color&quot;).&#10;&#9;&#9;Joins(&quot;JOIN ticket_labels ON labels.id = ticket_labels.label_id&quot;).&#10;&#9;&#9;Where(&quot;ticket_labels.ticket_id = ?&quot;, ticket.ID).&#10;&#9;&#9;Scan(&amp;labels).Error&#10;&#9;if err != nil {&#10;&#9;&#9;labels = []LabelDTO{}&#10;&#9;}&#10;&#10;&#9;// Lấy assignees chi tiết&#10;&#9;var assignees []AssigneeDTO&#10;&#9;err = r.db.Table(&quot;task_assignments&quot;).&#10;&#9;&#9;Select(&quot;task_assignments.id, task_assignments.user_id, task_assignments.user_full_name as user_full_name, task_assignments.assigned_at&quot;).&#10;&#9;&#9;Where(&quot;ticket_id = ?&quot;, ticket.ID).&#10;&#9;&#9;Scan(&amp;assignees).Error&#10;&#9;if err != nil {&#10;&#9;&#9;assignees = []AssigneeDTO{}&#10;&#9;}&#10;&#10;&#9;// Lấy comments chi tiết&#10;&#9;var comments []CommentDTO&#10;&#9;err = r.db.Table(&quot;ticket_comments&quot;).&#10;&#9;&#9;Select(&quot;id, user_id, content, created_at&quot;).&#10;&#9;&#9;Where(&quot;ticket_id = ?&quot;, ticket.ID).&#10;&#9;&#9;Order(&quot;created_at ASC&quot;).&#10;&#9;&#9;Scan(&amp;comments).Error&#10;&#9;if err != nil {&#10;&#9;&#9;comments = []CommentDTO{}&#10;&#9;}&#10;&#10;&#9;// Xác định completed&#10;&#9;completed := column.Name == &quot;DONE&quot; || column.Name == &quot;COMPLETED&quot;&#10;&#10;&#9;ticketDTO := TicketDTO{&#10;&#9;&#9;ID:          ticket.ID,&#10;&#9;&#9;Title:       ticket.Title,&#10;&#9;&#9;Description: ticket.Description,&#10;&#9;&#9;TicketID:    ticket.ID,&#10;&#9;&#9;Labels:      labels,&#10;&#9;&#9;Assignees:   assignees,&#10;&#9;&#9;Comments:    comments,&#10;&#9;&#9;Completed:   completed,&#10;&#9;&#9;DueDate:     ticket.DueDate,&#10;&#9;&#9;Priority:    ticket.Priority,&#10;&#9;&#9;CreatedAt:   ticket.CreatedAt,&#10;&#9;&#9;UpdatedAt:   ticket.UpdatedAt,&#10;&#9;}&#10;&#10;&#9;columnDTO := ColumnDTO{&#10;&#9;&#9;ID:        column.ID,&#10;&#9;&#9;Name:      column.Name,&#10;&#9;&#9;Position:  column.Position,&#10;&#9;&#9;CreatedAt: column.CreatedAt,&#10;&#9;&#9;UpdatedAt: column.UpdatedAt,&#10;&#9;}&#10;&#10;&#9;result := &amp;TicketDetailDTO{&#10;&#9;&#9;Ticket:    ticketDTO,&#10;&#9;&#9;Column:    columnDTO,&#10;&#9;&#9;Labels:    labels,&#10;&#9;&#9;Assignees: assignees,&#10;&#9;&#9;Comments:  comments,&#10;&#9;}&#10;&#10;&#9;return result, nil&#10;}&#10;&#10;func (r *Repository) GetTicketWithAllRelations(ticketID string) (*TicketDTO, error) {&#10;&#9;var ticket entity.Ticket&#10;&#9;var column entity.Column&#10;&#10;&#9;// Lấy thông tin ticket&#10;&#9;err := r.db.Where(&quot;id = ?&quot;, ticketID).First(&amp;ticket).Error&#10;&#9;if err != nil {&#10;&#9;&#9;return nil, err&#10;&#9;}&#10;&#10;&#9;// Lấy thông tin column để xác định completed&#10;&#9;err = r.db.Where(&quot;id = ?&quot;, ticket.ColumnID).First(&amp;column).Error&#10;&#9;if err != nil {&#10;&#9;&#9;return nil, err&#10;&#9;}&#10;&#10;&#9;// Lấy labels chi tiết&#10;&#9;var labels []LabelDTO&#10;&#9;err = r.db.Table(&quot;labels&quot;).&#10;&#9;&#9;Select(&quot;labels.id, labels.name, labels.color&quot;).&#10;&#9;&#9;Joins(&quot;JOIN ticket_labels ON labels.id = ticket_labels.label_id&quot;).&#10;&#9;&#9;Where(&quot;ticket_labels.ticket_id = ?&quot;, ticket.ID).&#10;&#9;&#9;Scan(&amp;labels).Error&#10;&#9;if err != nil {&#10;&#9;&#9;labels = []LabelDTO{}&#10;&#9;}&#10;&#10;&#9;// Lấy assignees chi tiết&#10;&#9;var assignees []AssigneeDTO&#10;&#9;err = r.db.Table(&quot;task_assignments&quot;).&#10;&#9;&#9;Select(&quot;task_assignments.id, task_assignments.user_id, task_assignments.user_full_name as user_full_name, task_assignments.assigned_at&quot;).&#10;&#9;&#9;Where(&quot;ticket_id = ?&quot;, ticket.ID).&#10;&#9;&#9;Scan(&amp;assignees).Error&#10;&#9;if err != nil {&#10;&#9;&#9;assignees = []AssigneeDTO{}&#10;&#9;}&#10;&#10;&#9;// Lấy comments chi tiết&#10;&#9;var comments []CommentDTO&#10;&#9;err = r.db.Table(&quot;ticket_comments&quot;).&#10;&#9;&#9;Select(&quot;id, user_id, content, created_at&quot;).&#10;&#9;&#9;Where(&quot;ticket_id = ?&quot;, ticket.ID).&#10;&#9;&#9;Order(&quot;created_at ASC&quot;).&#10;&#9;&#9;Scan(&amp;comments).Error&#10;&#9;if err != nil {&#10;&#9;&#9;comments = []CommentDTO{}&#10;&#9;}&#10;&#10;&#9;// Xác định completed&#10;&#9;completed := column.Name == &quot;DONE&quot; || column.Name == &quot;COMPLETED&quot;&#10;&#10;&#9;result := &amp;TicketDTO{&#10;&#9;&#9;ID:          ticket.ID,&#10;&#9;&#9;Title:       ticket.Title,&#10;&#9;&#9;Description: ticket.Description,&#10;&#9;&#9;TicketID:    ticket.ID,&#10;&#9;&#9;Labels:      labels,&#10;&#9;&#9;Assignees:   assignees,&#10;&#9;&#9;Comments:    comments,&#10;&#9;&#9;Completed:   completed,&#10;&#9;&#9;DueDate:     ticket.DueDate,&#10;&#9;&#9;Priority:    ticket.Priority,&#10;&#9;&#9;CreatedAt:   ticket.CreatedAt,&#10;&#9;&#9;UpdatedAt:   ticket.UpdatedAt,&#10;&#9;}&#10;&#10;&#9;return result, nil&#10;}&#10;" />
              <option name="updatedContent" value="package repository&#10;&#10;import (&#10;&#9;&quot;fmt&quot;&#10;&#9;&quot;github.com/tnqbao/gau-kanban-service/entity&quot;&#10;)&#10;&#10;func (r *Repository) generateTicketNumber() (string, error) {&#10;&#9;var count int64&#10;&#9;err := r.db.Model(&amp;entity.Ticket{}).Count(&amp;count).Error&#10;&#9;if err != nil {&#10;&#9;&#9;return &quot;&quot;, err&#10;&#9;}&#10;&#9;return fmt.Sprintf(&quot;TASK-%04d&quot;, count+1), nil&#10;}&#10;&#10;func (r *Repository) CreateTicket(ticket *entity.Ticket) error {&#10;&#9;// Generate ticket number nếu chưa có&#10;&#9;if ticket.TicketNo == &quot;&quot; {&#10;&#9;&#9;ticketNo, err := r.generateTicketNumber()&#10;&#9;&#9;if err != nil {&#10;&#9;&#9;&#9;return err&#10;&#9;&#9;}&#10;&#9;&#9;ticket.TicketNo = ticketNo&#10;&#9;}&#10;&#10;&#9;// Nếu position chưa được set, đặt ticket ở cuối column&#10;&#9;if ticket.Position == 0 {&#10;&#9;&#9;maxPosition, err := r.getMaxPositionInColumn(ticket.ColumnID)&#10;&#9;&#9;if err != nil {&#10;&#9;&#9;&#9;return err&#10;&#9;&#9;}&#10;&#9;&#9;ticket.Position = maxPosition + 1&#10;&#9;}&#10;&#10;&#9;return r.db.Create(ticket).Error&#10;}&#10;&#10;// getMaxPositionInColumn lấy position cao nhất trong column&#10;func (r *Repository) getMaxPositionInColumn(columnID string) (int, error) {&#10;&#9;var maxPosition int&#10;&#9;err := r.db.Model(&amp;entity.Ticket{}).&#10;&#9;&#9;Where(&quot;column_id = ?&quot;, columnID).&#10;&#9;&#9;Select(&quot;COALESCE(MAX(position), -1)&quot;).&#10;&#9;&#9;Scan(&amp;maxPosition).Error&#10;&#9;return maxPosition, err&#10;}&#10;&#10;func (r *Repository) GetAllTicket() ([]entity.Ticket, error) {&#10;&#9;var tickets []entity.Ticket&#10;&#9;err := r.db.Order(&quot;created_at DESC&quot;).Find(&amp;tickets).Error&#10;&#9;return tickets, err&#10;}&#10;&#10;func (r *Repository) GetTicketByID(id string) (*entity.Ticket, error) {&#10;&#9;var ticket entity.Ticket&#10;&#9;err := r.db.Where(&quot;id = ?&quot;, id).First(&amp;ticket).Error&#10;&#9;if err != nil {&#10;&#9;&#9;return nil, err&#10;&#9;}&#10;&#9;return &amp;ticket, nil&#10;}&#10;&#10;func (r *Repository) GetTicketByColumnID(columnID string) ([]entity.Ticket, error) {&#10;&#9;var tickets []entity.Ticket&#10;&#9;err := r.db.Where(&quot;column_id = ?&quot;, columnID).Order(&quot;position ASC, created_at ASC&quot;).Find(&amp;tickets).Error&#10;&#9;return tickets, err&#10;}&#10;&#10;func (r *Repository) UpdateTicket(ticket *entity.Ticket) error {&#10;&#9;return r.db.Save(ticket).Error&#10;}&#10;&#10;func (r *Repository) DeleteTicket(id string) error {&#10;&#9;return r.db.Delete(&amp;entity.Ticket{}, &quot;id = ?&quot;, id).Error&#10;}&#10;&#10;func (r *Repository) MoveTicketToColumn(ticketID, columnID string) error {&#10;&#9;return r.db.Model(&amp;entity.Ticket{}).Where(&quot;id = ?&quot;, ticketID).Update(&quot;column_id&quot;, columnID).Error&#10;}&#10;&#10;// MoveTicketToColumnWithPosition di chuyển ticket sang column khác với position cụ thể&#10;func (r *Repository) MoveTicketToColumnWithPosition(ticketID, newColumnID string, newPosition int) error {&#10;&#9;// Lấy thông tin ticket hiện tại&#10;&#9;ticket, err := r.GetTicketByID(ticketID)&#10;&#9;if err != nil {&#10;&#9;&#9;return err&#10;&#9;}&#10;&#10;&#9;oldColumnID := ticket.ColumnID&#10;&#9;oldPosition := ticket.Position&#10;&#10;&#9;// Bắt đầu transaction&#10;&#9;tx := r.db.Begin()&#10;&#9;if tx.Error != nil {&#10;&#9;&#9;return tx.Error&#10;&#9;}&#10;&#9;defer func() {&#10;&#9;&#9;if r := recover(); r != nil {&#10;&#9;&#9;&#9;tx.Rollback()&#10;&#9;&#9;}&#10;&#9;}()&#10;&#10;&#9;if oldColumnID == newColumnID {&#10;&#9;&#9;// Nếu di chuyển trong cùng column, dùng logic UpdateTicketPosition&#10;&#9;&#9;if newPosition &lt; oldPosition {&#10;&#9;&#9;&#9;err = tx.Model(&amp;entity.Ticket{}).&#10;&#9;&#9;&#9;&#9;Where(&quot;column_id = ? AND position &gt;= ? AND position &lt; ? AND id != ?&quot;,&#10;&#9;&#9;&#9;&#9;&#9;newColumnID, newPosition, oldPosition, ticketID).&#10;&#9;&#9;&#9;&#9;Update(&quot;position&quot;, tx.Raw(&quot;position + 1&quot;)).Error&#10;&#9;&#9;} else if newPosition &gt; oldPosition {&#10;&#9;&#9;&#9;err = tx.Model(&amp;entity.Ticket{}).&#10;&#9;&#9;&#9;&#9;Where(&quot;column_id = ? AND position &gt; ? AND position &lt;= ? AND id != ?&quot;,&#10;&#9;&#9;&#9;&#9;&#9;newColumnID, oldPosition, newPosition, ticketID).&#10;&#9;&#9;&#9;&#9;Update(&quot;position&quot;, tx.Raw(&quot;position - 1&quot;)).Error&#10;&#9;&#9;}&#10;&#9;} else {&#10;&#9;&#9;// Di chuyển giữa các column khác nhau&#10;&#10;&#9;&#9;// 1. Cập nhật position trong column cũ (đóng khoảng trống)&#10;&#9;&#9;err = tx.Model(&amp;entity.Ticket{}).&#10;&#9;&#9;&#9;Where(&quot;column_id = ? AND position &gt; ?&quot;, oldColumnID, oldPosition).&#10;&#9;&#9;&#9;Update(&quot;position&quot;, tx.Raw(&quot;position - 1&quot;)).Error&#10;&#9;&#9;if err != nil {&#10;&#9;&#9;&#9;tx.Rollback()&#10;&#9;&#9;&#9;return err&#10;&#9;&#9;}&#10;&#10;&#9;&#9;// 2. Cập nhật position trong column mới (tạo chỗ trống)&#10;&#9;&#9;err = tx.Model(&amp;entity.Ticket{}).&#10;&#9;&#9;&#9;Where(&quot;column_id = ? AND position &gt;= ?&quot;, newColumnID, newPosition).&#10;&#9;&#9;&#9;Update(&quot;position&quot;, tx.Raw(&quot;position + 1&quot;)).Error&#10;&#9;&#9;if err != nil {&#10;&#9;&#9;&#9;tx.Rollback()&#10;&#9;&#9;&#9;return err&#10;&#9;&#9;}&#10;&#9;}&#10;&#10;&#9;if err != nil {&#10;&#9;&#9;tx.Rollback()&#10;&#9;&#9;return err&#10;&#9;}&#10;&#10;&#9;// 3. Cập nhật ticket với column và position mới&#10;&#9;err = tx.Model(&amp;entity.Ticket{}).&#10;&#9;&#9;Where(&quot;id = ?&quot;, ticketID).&#10;&#9;&#9;Updates(map[string]interface{}{&#10;&#9;&#9;&#9;&quot;column_id&quot;: newColumnID,&#10;&#9;&#9;&#9;&quot;position&quot;:  newPosition,&#10;&#9;&#9;}).Error&#10;&#9;if err != nil {&#10;&#9;&#9;tx.Rollback()&#10;&#9;&#9;return err&#10;&#9;}&#10;&#10;&#9;return tx.Commit().Error&#10;}&#10;&#10;func (r *Repository) UpdateTicketPosition(ticketID string, newPosition int) error {&#10;&#9;// Lấy thông tin ticket hiện tại&#10;&#9;ticket, err := r.GetTicketByID(ticketID)&#10;&#9;if err != nil {&#10;&#9;&#9;return err&#10;&#9;}&#10;&#10;&#9;oldPosition := ticket.Position&#10;&#9;columnID := ticket.ColumnID&#10;&#10;&#9;// Bắt đầu transaction&#10;&#9;tx := r.db.Begin()&#10;&#9;if tx.Error != nil {&#10;&#9;&#9;return tx.Error&#10;&#9;}&#10;&#9;defer func() {&#10;&#9;&#9;if r := recover(); r != nil {&#10;&#9;&#9;&#9;tx.Rollback()&#10;&#9;&#9;}&#10;&#9;}()&#10;&#10;&#9;// Nếu di chuyển lên (newPosition &lt; oldPosition)&#10;&#9;if newPosition &lt; oldPosition {&#10;&#9;&#9;// Các tickets có position từ newPosition đến oldPosition-1 sẽ tăng position lên 1&#10;&#9;&#9;err = tx.Model(&amp;entity.Ticket{}).&#10;&#9;&#9;&#9;Where(&quot;column_id = ? AND position &gt;= ? AND position &lt; ? AND id != ?&quot;,&#10;&#9;&#9;&#9;&#9;columnID, newPosition, oldPosition, ticketID).&#10;&#9;&#9;&#9;Update(&quot;position&quot;, tx.Raw(&quot;position + 1&quot;)).Error&#10;&#9;&#9;if err != nil {&#10;&#9;&#9;&#9;tx.Rollback()&#10;&#9;&#9;&#9;return err&#10;&#9;&#9;}&#10;&#9;} else if newPosition &gt; oldPosition {&#10;&#9;&#9;// Nếu di chuyển xuống (newPosition &gt; oldPosition)&#10;&#9;&#9;// Các tickets có position từ oldPosition+1 đến newPosition sẽ giảm position xuống 1&#10;&#9;&#9;err = tx.Model(&amp;entity.Ticket{}).&#10;&#9;&#9;&#9;Where(&quot;column_id = ? AND position &gt; ? AND position &lt;= ? AND id != ?&quot;,&#10;&#9;&#9;&#9;&#9;columnID, oldPosition, newPosition, ticketID).&#10;&#9;&#9;&#9;Update(&quot;position&quot;, tx.Raw(&quot;position - 1&quot;)).Error&#10;&#9;&#9;if err != nil {&#10;&#9;&#9;&#9;tx.Rollback()&#10;&#9;&#9;&#9;return err&#10;&#9;&#9;}&#10;&#9;}&#10;&#10;&#9;// Cập nhật position của ticket được di chuyển&#10;&#9;err = tx.Model(&amp;entity.Ticket{}).&#10;&#9;&#9;Where(&quot;id = ?&quot;, ticketID).&#10;&#9;&#9;Update(&quot;position&quot;, newPosition).Error&#10;&#9;if err != nil {&#10;&#9;&#9;tx.Rollback()&#10;&#9;&#9;return err&#10;&#9;}&#10;&#10;&#9;return tx.Commit().Error&#10;}&#10;&#10;func (r *Repository) GetTicketWithAssignments(ticketID string) (*entity.Ticket, []entity.TaskAssignment, error) {&#10;&#9;var ticket entity.Ticket&#10;&#9;var assignments []entity.TaskAssignment&#10;&#10;&#9;err := r.db.Where(&quot;id = ?&quot;, ticketID).First(&amp;ticket).Error&#10;&#9;if err != nil {&#10;&#9;&#9;return nil, nil, err&#10;&#9;}&#10;&#10;&#9;err = r.db.Where(&quot;ticket_id = ?&quot;, ticketID).Find(&amp;assignments).Error&#10;&#9;if err != nil {&#10;&#9;&#9;return &amp;ticket, nil, err&#10;&#9;}&#10;&#10;&#9;return &amp;ticket, assignments, nil&#10;}&#10;&#10;func (r *Repository) GetTicketWithLabels(ticketID string) (*entity.Ticket, []entity.Label, error) {&#10;&#9;var ticket entity.Ticket&#10;&#9;var labels []entity.Label&#10;&#10;&#9;err := r.db.Where(&quot;id = ?&quot;, ticketID).First(&amp;ticket).Error&#10;&#9;if err != nil {&#10;&#9;&#9;return nil, nil, err&#10;&#9;}&#10;&#10;&#9;err = r.db.Table(&quot;labels&quot;).&#10;&#9;&#9;Joins(&quot;JOIN ticket_labels ON labels.id = ticket_labels.label_id&quot;).&#10;&#9;&#9;Where(&quot;ticket_labels.ticket_id = ?&quot;, ticketID).&#10;&#9;&#9;Find(&amp;labels).Error&#10;&#10;&#9;if err != nil {&#10;&#9;&#9;return &amp;ticket, nil, err&#10;&#9;}&#10;&#10;&#9;return &amp;ticket, labels, nil&#10;}&#10;&#10;func (r *Repository) SearchTicket(query string) ([]entity.Ticket, error) {&#10;&#9;var tickets []entity.Ticket&#10;&#9;searchPattern := &quot;%&quot; + query + &quot;%&quot;&#10;&#9;err := r.db.Where(&quot;title ILIKE ? OR description ILIKE ?&quot;, searchPattern, searchPattern).&#10;&#9;&#9;Order(&quot;created_at DESC&quot;).Find(&amp;tickets).Error&#10;&#9;return tickets, err&#10;}&#10;&#10;func (r *Repository) GetTicketDetail(ticketID string) (*TicketDetailDTO, error) {&#10;&#9;var ticket entity.Ticket&#10;&#9;var column entity.Column&#10;&#10;&#9;// Lấy thông tin ticket&#10;&#9;err := r.db.Where(&quot;id = ?&quot;, ticketID).First(&amp;ticket).Error&#10;&#9;if err != nil {&#10;&#9;&#9;return nil, err&#10;&#9;}&#10;&#10;&#9;// Lấy thông tin column&#10;&#9;err = r.db.Where(&quot;id = ?&quot;, ticket.ColumnID).First(&amp;column).Error&#10;&#9;if err != nil {&#10;&#9;&#9;return nil, err&#10;&#9;}&#10;&#10;&#9;// Lấy labels chi tiết&#10;&#9;var labels []LabelDTO&#10;&#9;err = r.db.Table(&quot;labels&quot;).&#10;&#9;&#9;Select(&quot;labels.id, labels.name, labels.color&quot;).&#10;&#9;&#9;Joins(&quot;JOIN ticket_labels ON labels.id = ticket_labels.label_id&quot;).&#10;&#9;&#9;Where(&quot;ticket_labels.ticket_id = ?&quot;, ticket.ID).&#10;&#9;&#9;Scan(&amp;labels).Error&#10;&#9;if err != nil {&#10;&#9;&#9;labels = []LabelDTO{}&#10;&#9;}&#10;&#10;&#9;// Lấy assignees chi tiết&#10;&#9;var assignees []AssigneeDTO&#10;&#9;err = r.db.Table(&quot;task_assignments&quot;).&#10;&#9;&#9;Select(&quot;task_assignments.id, task_assignments.user_id, task_assignments.user_full_name as user_full_name, task_assignments.assigned_at&quot;).&#10;&#9;&#9;Where(&quot;ticket_id = ?&quot;, ticket.ID).&#10;&#9;&#9;Scan(&amp;assignees).Error&#10;&#9;if err != nil {&#10;&#9;&#9;assignees = []AssigneeDTO{}&#10;&#9;}&#10;&#10;&#9;// Lấy comments chi tiết&#10;&#9;var comments []CommentDTO&#10;&#9;err = r.db.Table(&quot;ticket_comments&quot;).&#10;&#9;&#9;Select(&quot;id, user_id, content, created_at&quot;).&#10;&#9;&#9;Where(&quot;ticket_id = ?&quot;, ticket.ID).&#10;&#9;&#9;Order(&quot;created_at ASC&quot;).&#10;&#9;&#9;Scan(&amp;comments).Error&#10;&#9;if err != nil {&#10;&#9;&#9;comments = []CommentDTO{}&#10;&#9;}&#10;&#10;&#9;// Xác định completed&#10;&#9;completed := column.Name == &quot;DONE&quot; || column.Name == &quot;COMPLETED&quot;&#10;&#10;&#9;ticketDTO := TicketDTO{&#10;&#9;&#9;ID:          ticket.ID,&#10;&#9;&#9;Title:       ticket.Title,&#10;&#9;&#9;Description: ticket.Description,&#10;&#9;&#9;TicketID:    ticket.ID,&#10;&#9;&#9;Labels:      labels,&#10;&#9;&#9;Assignees:   assignees,&#10;&#9;&#9;Comments:    comments,&#10;&#9;&#9;Completed:   completed,&#10;&#9;&#9;DueDate:     ticket.DueDate,&#10;&#9;&#9;Priority:    ticket.Priority,&#10;&#9;&#9;CreatedAt:   ticket.CreatedAt,&#10;&#9;&#9;UpdatedAt:   ticket.UpdatedAt,&#10;&#9;}&#10;&#10;&#9;columnDTO := ColumnDTO{&#10;&#9;&#9;ID:        column.ID,&#10;&#9;&#9;Name:      column.Name,&#10;&#9;&#9;Position:  column.Position,&#10;&#9;&#9;CreatedAt: column.CreatedAt,&#10;&#9;&#9;UpdatedAt: column.UpdatedAt,&#10;&#9;}&#10;&#10;&#9;result := &amp;TicketDetailDTO{&#10;&#9;&#9;Ticket:    ticketDTO,&#10;&#9;&#9;Column:    columnDTO,&#10;&#9;&#9;Labels:    labels,&#10;&#9;&#9;Assignees: assignees,&#10;&#9;&#9;Comments:  comments,&#10;&#9;}&#10;&#10;&#9;return result, nil&#10;}&#10;&#10;func (r *Repository) GetTicketWithAllRelations(ticketID string) (*TicketDTO, error) {&#10;&#9;var ticket entity.Ticket&#10;&#9;var column entity.Column&#10;&#10;&#9;// Lấy thông tin ticket&#10;&#9;err := r.db.Where(&quot;id = ?&quot;, ticketID).First(&amp;ticket).Error&#10;&#9;if err != nil {&#10;&#9;&#9;return nil, err&#10;&#9;}&#10;&#10;&#9;// Lấy thông tin column để xác định completed&#10;&#9;err = r.db.Where(&quot;id = ?&quot;, ticket.ColumnID).First(&amp;column).Error&#10;&#9;if err != nil {&#10;&#9;&#9;return nil, err&#10;&#9;}&#10;&#10;&#9;// Lấy labels chi tiết&#10;&#9;var labels []LabelDTO&#10;&#9;err = r.db.Table(&quot;labels&quot;).&#10;&#9;&#9;Select(&quot;labels.id, labels.name, labels.color&quot;).&#10;&#9;&#9;Joins(&quot;JOIN ticket_labels ON labels.id = ticket_labels.label_id&quot;).&#10;&#9;&#9;Where(&quot;ticket_labels.ticket_id = ?&quot;, ticket.ID).&#10;&#9;&#9;Scan(&amp;labels).Error&#10;&#9;if err != nil {&#10;&#9;&#9;labels = []LabelDTO{}&#10;&#9;}&#10;&#10;&#9;// Lấy assignees chi tiết&#10;&#9;var assignees []AssigneeDTO&#10;&#9;err = r.db.Table(&quot;task_assignments&quot;).&#10;&#9;&#9;Select(&quot;task_assignments.id, task_assignments.user_id, task_assignments.user_full_name as user_full_name, task_assignments.assigned_at&quot;).&#10;&#9;&#9;Where(&quot;ticket_id = ?&quot;, ticket.ID).&#10;&#9;&#9;Scan(&amp;assignees).Error&#10;&#9;if err != nil {&#10;&#9;&#9;assignees = []AssigneeDTO{}&#10;&#9;}&#10;&#10;&#9;// Lấy comments chi tiết&#10;&#9;var comments []CommentDTO&#10;&#9;err = r.db.Table(&quot;ticket_comments&quot;).&#10;&#9;&#9;Select(&quot;id, user_id, content, created_at&quot;).&#10;&#9;&#9;Where(&quot;ticket_id = ?&quot;, ticket.ID).&#10;&#9;&#9;Order(&quot;created_at ASC&quot;).&#10;&#9;&#9;Scan(&amp;comments).Error&#10;&#9;if err != nil {&#10;&#9;&#9;comments = []CommentDTO{}&#10;&#9;}&#10;&#10;&#9;// Xác định completed&#10;&#9;completed := column.Name == &quot;DONE&quot; || column.Name == &quot;COMPLETED&quot;&#10;&#10;&#9;result := &amp;TicketDTO{&#10;&#9;&#9;ID:          ticket.ID,&#10;&#9;&#9;Title:       ticket.Title,&#10;&#9;&#9;Description: ticket.Description,&#10;&#9;&#9;TicketID:    ticket.ID,&#10;&#9;&#9;Labels:      labels,&#10;&#9;&#9;Assignees:   assignees,&#10;&#9;&#9;Comments:    comments,&#10;&#9;&#9;Completed:   completed,&#10;&#9;&#9;DueDate:     ticket.DueDate,&#10;&#9;&#9;Priority:    ticket.Priority,&#10;&#9;&#9;CreatedAt:   ticket.CreatedAt,&#10;&#9;&#9;UpdatedAt:   ticket.UpdatedAt,&#10;&#9;}&#10;&#10;&#9;return result, nil&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/routes/routes.go">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/routes/routes.go" />
              <option name="originalContent" value="package routes&#10;&#10;import (&#10;&#9;&quot;github.com/gin-gonic/gin&quot;&#10;&#9;&quot;github.com/tnqbao/gau-kanban-service/controller&quot;&#10;)&#10;&#10;func SetupRouter(ctrl *controller.Controller) *gin.Engine {&#10;&#10;&#9;// Initialize repository manager&#10;&#10;&#9;// Initialize kanban controller&#10;&#9;//kanbanCtrl := controller.NewColumnController(repoManager)&#10;&#10;&#9;r := gin.Default()&#10;&#10;&#9;apiRoutes := r.Group(&quot;/api/v2/kanban/&quot;)&#10;&#9;{&#10;&#9;&#9;apiRoutes.GET(&quot;/&quot;, ctrl.CheckHealth)&#10;&#10;&#9;&#9;// Kanban Board endpoints&#10;&#9;&#9;apiRoutes.GET(&quot;/board&quot;, ctrl.GetKanbanBoard)&#10;&#9;&#9;apiRoutes.GET(&quot;/tag-colors&quot;, ctrl.GetTagColors)&#10;&#10;&#9;&#9;// Column management&#10;&#9;&#9;apiRoutes.POST(&quot;/columns&quot;, ctrl.CreateColumn)&#10;&#9;&#9;apiRoutes.GET(&quot;/columns&quot;, ctrl.GetColumns)&#10;&#9;&#9;apiRoutes.PUT(&quot;/columns/:id&quot;, ctrl.UpdateColumn)&#10;&#9;&#9;apiRoutes.DELETE(&quot;/columns/:id&quot;, ctrl.DeleteColumn)&#10;&#9;&#9;apiRoutes.PATCH(&quot;/columns/:id/position&quot;, ctrl.UpdateColumnPosition)&#10;&#10;&#9;&#9;// Ticket management&#10;&#9;&#9;apiRoutes.POST(&quot;/tickets&quot;, ctrl.CreateTicket)&#10;&#9;&#9;apiRoutes.GET(&quot;/tickets&quot;, ctrl.GetTickets)&#10;&#9;&#9;apiRoutes.GET(&quot;/tickets/:id&quot;, ctrl.GetTicket)&#10;&#9;&#9;apiRoutes.PUT(&quot;/tickets/:id&quot;, ctrl.UpdateTicket)&#10;&#9;&#9;apiRoutes.DELETE(&quot;/tickets/:id&quot;, ctrl.DeleteTicket)&#10;&#9;&#9;apiRoutes.PATCH(&quot;/tickets/move&quot;, ctrl.MoveTicketToColumn)&#10;&#9;&#9;apiRoutes.PATCH(&quot;/tickets/:id/position&quot;, ctrl.UpdateTicketPosition)&#10;&#10;&#9;&#9;// Assignment management&#10;&#9;&#9;apiRoutes.POST(&quot;/assignments&quot;, ctrl.CreateAssignment)&#10;&#9;&#9;apiRoutes.PUT(&quot;/assignments/:id&quot;, ctrl.UpdateAssignment)&#10;&#9;&#9;apiRoutes.DELETE(&quot;/assignments/:id&quot;, ctrl.DeleteAssignment)&#10;&#9;&#9;apiRoutes.DELETE(&quot;/users/:user_id/assignments&quot;, ctrl.DeleteAssignmentsByUserID)&#10;&#9;&#9;//apiRoutes.GET(&quot;/tickets/:ticket_id/assignments&quot;, ctrl.GetTicketAssignments)&#10;&#9;}&#10;&#9;return r&#10;}&#10;" />
              <option name="updatedContent" value="package routes&#10;&#10;import (&#10;&#9;&quot;github.com/gin-gonic/gin&quot;&#10;&#9;&quot;github.com/tnqbao/gau-kanban-service/controller&quot;&#10;)&#10;&#10;func SetupRouter(ctrl *controller.Controller) *gin.Engine {&#10;&#10;&#9;// Initialize repository manager&#10;&#10;&#9;// Initialize kanban controller&#10;&#9;//kanbanCtrl := controller.NewColumnController(repoManager)&#10;&#10;&#9;r := gin.Default()&#10;&#10;&#9;apiRoutes := r.Group(&quot;/api/v2/kanban/&quot;)&#10;&#9;{&#10;&#9;&#9;apiRoutes.GET(&quot;/&quot;, ctrl.CheckHealth)&#10;&#10;&#9;&#9;// Kanban Board endpoints&#10;&#9;&#9;apiRoutes.GET(&quot;/board&quot;, ctrl.GetKanbanBoard)&#10;&#9;&#9;apiRoutes.GET(&quot;/tag-colors&quot;, ctrl.GetTagColors)&#10;&#10;&#9;&#9;// Column management&#10;&#9;&#9;apiRoutes.POST(&quot;/columns&quot;, ctrl.CreateColumn)&#10;&#9;&#9;apiRoutes.GET(&quot;/columns&quot;, ctrl.GetColumns)&#10;&#9;&#9;apiRoutes.PUT(&quot;/columns/:id&quot;, ctrl.UpdateColumn)&#10;&#9;&#9;apiRoutes.DELETE(&quot;/columns/:id&quot;, ctrl.DeleteColumn)&#10;&#9;&#9;apiRoutes.PATCH(&quot;/columns/:id/position&quot;, ctrl.UpdateColumnPosition)&#10;&#10;&#9;&#9;// Ticket management&#10;&#9;&#9;apiRoutes.POST(&quot;/tickets&quot;, ctrl.CreateTicket)&#10;&#9;&#9;apiRoutes.GET(&quot;/tickets&quot;, ctrl.GetTickets)&#10;&#9;&#9;apiRoutes.GET(&quot;/tickets/:id&quot;, ctrl.GetTicket)&#10;&#9;&#9;apiRoutes.PUT(&quot;/tickets/:id&quot;, ctrl.UpdateTicket)&#10;&#9;&#9;apiRoutes.DELETE(&quot;/tickets/:id&quot;, ctrl.DeleteTicket)&#10;&#9;&#9;apiRoutes.PATCH(&quot;/tickets/move&quot;, ctrl.MoveTicketToColumn)&#10;&#9;&#9;apiRoutes.PATCH(&quot;/tickets/move-with-position&quot;, ctrl.MoveTicketWithPosition)&#10;&#9;&#9;apiRoutes.PATCH(&quot;/tickets/:id/position&quot;, ctrl.UpdateTicketPosition)&#10;&#10;&#9;&#9;// Assignment management&#10;&#9;&#9;apiRoutes.POST(&quot;/assignments&quot;, ctrl.CreateAssignment)&#10;&#9;&#9;apiRoutes.PUT(&quot;/assignments/:id&quot;, ctrl.UpdateAssignment)&#10;&#9;&#9;apiRoutes.DELETE(&quot;/assignments/:id&quot;, ctrl.DeleteAssignment)&#10;&#9;&#9;apiRoutes.DELETE(&quot;/users/:user_id/assignments&quot;, ctrl.DeleteAssignmentsByUserID)&#10;&#9;&#9;apiRoutes.GET(&quot;/tickets/:ticket_id/assignments&quot;, ctrl.GetTicketAssignments)&#10;&#9;}&#10;&#9;return r&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>