<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/entity/ticket.go">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/entity/ticket.go" />
              <option name="originalContent" value="package entity&#10;&#10;type Ticket struct {&#10;&#9;ID          string `gorm:&quot;primaryKey;type:uuid;default:gen_random_uuid()&quot; json:&quot;id&quot;`&#10;&#9;ColumnID    string `gorm:&quot;type:uuid;not null&quot; json:&quot;column_id&quot;`&#10;&#9;Title       string `gorm:&quot;type:text;not null&quot; json:&quot;title&quot;`&#10;&#9;Description string `gorm:&quot;type:text&quot; json:&quot;description&quot;`&#10;&#9;DueDate     string `gorm:&quot;type:date&quot; json:&quot;due_date&quot;`&#10;&#9;Priority    string `gorm:&quot;type:text&quot; json:&quot;priority&quot;`&#10;&#9;Position    int    `gorm:&quot;type:integer;default:0&quot; json:&quot;position&quot;`&#10;&#9;CreatedAt   string `gorm:&quot;type:timestamp with time zone;default:now()&quot; json:&quot;created_at&quot;`&#10;&#9;UpdatedAt   string `gorm:&quot;type:timestamp with time zone;default:now()&quot; json:&quot;updated_at&quot;`&#10;}&#10;&#10;func (Ticket) TableName() string {&#10;&#9;return &quot;tickets&quot;&#10;}&#10;" />
              <option name="updatedContent" value="package entity&#10;&#10;type Ticket struct {&#10;&#9;ID          string `gorm:&quot;primaryKey;type:uuid;default:gen_random_uuid()&quot; json:&quot;id&quot;`&#10;&#9;TicketNo    string `gorm:&quot;type:text;unique;not null&quot; json:&quot;ticket_no&quot;`&#10;&#9;ColumnID    string `gorm:&quot;type:uuid;not null&quot; json:&quot;column_id&quot;`&#10;&#9;Title       string `gorm:&quot;type:text;not null&quot; json:&quot;title&quot;`&#10;&#9;Description string `gorm:&quot;type:text&quot; json:&quot;description&quot;`&#10;&#9;DueDate     string `gorm:&quot;type:date&quot; json:&quot;due_date&quot;`&#10;&#9;Priority    string `gorm:&quot;type:text&quot; json:&quot;priority&quot;`&#10;&#9;Position    int    `gorm:&quot;type:integer;default:0&quot; json:&quot;position&quot;`&#10;&#9;CreatedAt   string `gorm:&quot;type:timestamp with time zone;default:now()&quot; json:&quot;created_at&quot;`&#10;&#9;UpdatedAt   string `gorm:&quot;type:timestamp with time zone;default:now()&quot; json:&quot;updated_at&quot;`&#10;}&#10;&#10;func (Ticket) TableName() string {&#10;&#9;return &quot;tickets&quot;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/migrations/20250808120000_empty_migration.down.sql">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/migrations/20250808120000_empty_migration.down.sql" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/migrations/20250808120000_empty_migration.up.sql">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/migrations/20250808120000_empty_migration.up.sql" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/repository/checklist.go">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/repository/checklist.go" />
              <option name="originalContent" value="&#10;" />
              <option name="updatedContent" value="package repository&#10;&#10;import (&#10;&#9;&quot;github.com/tnqbao/gau-kanban-service/entity&quot;&#10;)&#10;&#10;// Checklist methods&#10;&#10;func (r *Repository) CreateChecklist(checklist *entity.Checklist) error {&#10;&#9;return r.db.Create(checklist).Error&#10;}&#10;&#10;func (r *Repository) GetChecklistsByTicketID(ticketID string) ([]entity.Checklist, error) {&#10;&#9;var checklists []entity.Checklist&#10;&#9;err := r.db.Where(&quot;ticket_id = ?&quot;, ticketID).Order(&quot;position ASC&quot;).Find(&amp;checklists).Error&#10;&#9;return checklists, err&#10;}&#10;&#10;func (r *Repository) GetChecklistByID(id string) (*entity.Checklist, error) {&#10;&#9;var checklist entity.Checklist&#10;&#9;err := r.db.Where(&quot;id = ?&quot;, id).First(&amp;checklist).Error&#10;&#9;if err != nil {&#10;&#9;&#9;return nil, err&#10;&#9;}&#10;&#9;return &amp;checklist, nil&#10;}&#10;&#10;func (r *Repository) UpdateChecklist(checklist *entity.Checklist) error {&#10;&#9;return r.db.Save(checklist).Error&#10;}&#10;&#10;func (r *Repository) DeleteChecklist(id string) error {&#10;&#9;return r.db.Where(&quot;id = ?&quot;, id).Delete(&amp;entity.Checklist{}).Error&#10;}&#10;&#10;func (r *Repository) DeleteChecklistsByTicketID(ticketID string) error {&#10;&#9;return r.db.Where(&quot;ticket_id = ?&quot;, ticketID).Delete(&amp;entity.Checklist{}).Error&#10;}&#10;&#10;func (r *Repository) UpdateChecklistPosition(id string, position int) error {&#10;&#9;return r.db.Model(&amp;entity.Checklist{}).Where(&quot;id = ?&quot;, id).Update(&quot;position&quot;, position).Error&#10;}&#10;&#10;func (r *Repository) GetMaxChecklistPosition(ticketID string) (int, error) {&#10;&#9;var maxPosition int&#10;&#9;err := r.db.Model(&amp;entity.Checklist{}).Where(&quot;ticket_id = ?&quot;, ticketID).Select(&quot;COALESCE(MAX(position), 0)&quot;).Scan(&amp;maxPosition).Error&#10;&#9;return maxPosition, err&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/repository/checklist_repository.go">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/repository/checklist_repository.go" />
              <option name="updatedContent" value="package repository&#10;&#10;import (&#10;&#9;&quot;gau-kanban-service/entity&quot;&#10;&#9;&quot;gorm.io/gorm&quot;&#10;)&#10;&#10;type ChecklistRepository struct {&#10;&#9;DB *gorm.DB&#10;}&#10;&#10;func NewChecklistRepository(db *gorm.DB) *ChecklistRepository {&#10;&#9;return &amp;ChecklistRepository{&#10;&#9;&#9;DB: db,&#10;&#9;}&#10;}&#10;&#10;func (r *ChecklistRepository) Create(checklist *entity.Checklist) error {&#10;&#9;return r.DB.Create(checklist).Error&#10;}&#10;&#10;func (r *ChecklistRepository) GetByTicketID(ticketID string) ([]entity.Checklist, error) {&#10;&#9;var checklists []entity.Checklist&#10;&#9;err := r.DB.Where(&quot;ticket_id = ?&quot;, ticketID).Order(&quot;position ASC&quot;).Find(&amp;checklists).Error&#10;&#9;return checklists, err&#10;}&#10;&#10;func (r *ChecklistRepository) GetByID(id string) (*entity.Checklist, error) {&#10;&#9;var checklist entity.Checklist&#10;&#9;err := r.DB.Where(&quot;id = ?&quot;, id).First(&amp;checklist).Error&#10;&#9;if err != nil {&#10;&#9;&#9;return nil, err&#10;&#9;}&#10;&#9;return &amp;checklist, nil&#10;}&#10;&#10;func (r *ChecklistRepository) Update(checklist *entity.Checklist) error {&#10;&#9;return r.DB.Save(checklist).Error&#10;}&#10;&#10;func (r *ChecklistRepository) Delete(id string) error {&#10;&#9;return r.DB.Where(&quot;id = ?&quot;, id).Delete(&amp;entity.Checklist{}).Error&#10;}&#10;&#10;func (r *ChecklistRepository) DeleteByTicketID(ticketID string) error {&#10;&#9;return r.DB.Where(&quot;ticket_id = ?&quot;, ticketID).Delete(&amp;entity.Checklist{}).Error&#10;}&#10;&#10;func (r *ChecklistRepository) UpdatePosition(id string, position int) error {&#10;&#9;return r.DB.Model(&amp;entity.Checklist{}).Where(&quot;id = ?&quot;, id).Update(&quot;position&quot;, position).Error&#10;}&#10;&#10;func (r *ChecklistRepository) GetMaxPosition(ticketID string) (int, error) {&#10;&#9;var maxPosition int&#10;&#9;err := r.DB.Model(&amp;entity.Checklist{}).Where(&quot;ticket_id = ?&quot;, ticketID).Select(&quot;COALESCE(MAX(position), 0)&quot;).Scan(&amp;maxPosition).Error&#10;&#9;return maxPosition, err&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/repository/main.go">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/repository/main.go" />
              <option name="originalContent" value="package repository&#10;&#10;import (&#10;&#9;&quot;github.com/tnqbao/gau-kanban-service/infra&quot;&#10;&#9;&quot;gorm.io/gorm&quot;&#10;)&#10;&#10;type Repository struct {&#10;&#9;db            *gorm.DB&#10;&#9;ChecklistRepo *ChecklistRepository&#10;&#9;//cacheDb        *redis.Client&#10;}&#10;&#10;var repository *Repository&#10;&#10;func InitRepository(infra *infra.Infra) *Repository {&#10;&#9;repository = &amp;Repository{&#10;&#9;&#9;db:            infra.Postgres.DB,&#10;&#9;&#9;ChecklistRepo: NewChecklistRepository(infra.Postgres.DB),&#10;&#9;&#9;//cacheDb: infra.Redis.Client,&#10;&#9;}&#10;&#9;if repository.db == nil {&#10;&#9;&#9;panic(&quot;database connection is nil&quot;)&#10;&#9;}&#10;&#9;return repository&#10;}&#10;&#10;func GetRepository() *Repository {&#10;&#9;if repository == nil {&#10;&#9;&#9;panic(&quot;repository not initialized&quot;)&#10;&#9;}&#10;&#9;return repository&#10;}&#10;" />
              <option name="updatedContent" value="package repository&#10;&#10;import (&#10;&#9;&quot;github.com/tnqbao/gau-kanban-service/infra&quot;&#10;&#9;&quot;gorm.io/gorm&quot;&#10;)&#10;&#10;type Repository struct {&#10;&#9;db *gorm.DB&#10;&#9;//cacheDb *redis.Client&#10;}&#10;&#10;var repository *Repository&#10;&#10;func InitRepository(infra *infra.Infra) *Repository {&#10;&#9;repository = &amp;Repository{&#10;&#9;&#9;db: infra.Postgres.DB,&#10;&#9;&#9;//cacheDb: infra.Redis.Client,&#10;&#9;}&#10;&#9;if repository.db == nil {&#10;&#9;&#9;panic(&quot;database connection is nil&quot;)&#10;&#9;}&#10;&#9;return repository&#10;}&#10;&#10;func GetRepository() *Repository {&#10;&#9;if repository == nil {&#10;&#9;&#9;panic(&quot;repository not initialized&quot;)&#10;&#9;}&#10;&#9;return repository&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>